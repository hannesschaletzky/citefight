[{"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/reportWebVitals.js":"1","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/index.tsx":"2","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/App.tsx":"3","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/root/Header.tsx":"4","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/Match.tsx":"5","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Legal.tsx":"6","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/root/Footer.tsx":"7","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/errorpages/NotFound.tsx":"8","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/Tweet.tsx":"9","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Donate.tsx":"10","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Landing.tsx":"11","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/Mockup.tsx":"12","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/About.tsx":"13","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/Setup.tsx":"14","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Mockdata.ts":"15","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/search/Search.tsx":"16","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/pages/Nav_Ranking.tsx":"17","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/Nav.tsx":"18","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/Images.tsx":"19","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/BottomPart.tsx":"20","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/pages/Nav_Answers.tsx":"21","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/players/Players.tsx":"22","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/chat/Chat.tsx":"23","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/TopPart.tsx":"24","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Interfaces.tsx":"25","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Credits.tsx":"26","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/Extensions.js":"27","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/interaction/Interaction.tsx":"28","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Logic.tsx":"29","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/TwitterRedirect.tsx":"30","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/TwitterCallback.tsx":"31","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/join/Join.tsx":"32","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/search/TwitterProfileList.tsx":"33","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/info/Info.tsx":"34","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/lobby/profiles/Profiles.tsx":"35","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/lobby/settings/Settings.tsx":"36","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/lobby/Lobby.tsx":"37","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/join/PusherClient.tsx":"38"},{"size":362,"mtime":1612013307768,"results":"39","hashOfConfig":"40"},{"size":500,"mtime":1612016004776,"results":"41","hashOfConfig":"40"},{"size":3578,"mtime":1615030910422,"results":"42","hashOfConfig":"40"},{"size":491,"mtime":1614904469938,"results":"43","hashOfConfig":"40"},{"size":1742,"mtime":1614951694593,"results":"44","hashOfConfig":"40"},{"size":401,"mtime":1611867431112,"results":"45","hashOfConfig":"40"},{"size":2213,"mtime":1613086149703,"results":"46","hashOfConfig":"40"},{"size":500,"mtime":1612823136652,"results":"47","hashOfConfig":"40"},{"size":1106,"mtime":1612802141414,"results":"48","hashOfConfig":"40"},{"size":322,"mtime":1612820947127,"results":"49","hashOfConfig":"40"},{"size":1268,"mtime":1614952082500,"results":"50","hashOfConfig":"40"},{"size":1619,"mtime":1612814853355,"results":"51","hashOfConfig":"40"},{"size":318,"mtime":1612820938975,"results":"52","hashOfConfig":"40"},{"size":50511,"mtime":1614991273738,"results":"53","hashOfConfig":"40"},{"size":6643,"mtime":1614555212187,"results":"54","hashOfConfig":"40"},{"size":16449,"mtime":1614951948846,"results":"55","hashOfConfig":"40"},{"size":6749,"mtime":1612814305974,"results":"56","hashOfConfig":"40"},{"size":3589,"mtime":1613575257068,"results":"57","hashOfConfig":"40"},{"size":4794,"mtime":1614952106044,"results":"58","hashOfConfig":"40"},{"size":1532,"mtime":1612216278448,"results":"59","hashOfConfig":"40"},{"size":3050,"mtime":1612814163876,"results":"60","hashOfConfig":"40"},{"size":1872,"mtime":1614898797925,"results":"61","hashOfConfig":"40"},{"size":6126,"mtime":1614902297450,"results":"62","hashOfConfig":"40"},{"size":1689,"mtime":1614555193565,"results":"63","hashOfConfig":"40"},{"size":2921,"mtime":1614962725256,"results":"64","hashOfConfig":"40"},{"size":618,"mtime":1612820967289,"results":"65","hashOfConfig":"40"},{"size":2319,"mtime":1613140824619,"results":"66","hashOfConfig":"67"},{"size":4191,"mtime":1614951883474,"results":"68","hashOfConfig":"40"},{"size":1492,"mtime":1614954034640,"results":"69","hashOfConfig":"40"},{"size":741,"mtime":1614952081828,"results":"70","hashOfConfig":"40"},{"size":5825,"mtime":1614951989524,"results":"71","hashOfConfig":"40"},{"size":7891,"mtime":1615031047808,"results":"72","hashOfConfig":"40"},{"size":6772,"mtime":1614951964395,"results":"73","hashOfConfig":"40"},{"size":266,"mtime":1614461893853,"results":"74","hashOfConfig":"40"},{"size":1131,"mtime":1614899297309,"results":"75","hashOfConfig":"40"},{"size":6787,"mtime":1614682527141,"results":"76","hashOfConfig":"40"},{"size":2922,"mtime":1614899240316,"results":"77","hashOfConfig":"40"},{"size":1941,"mtime":1615028189858,"results":"78","hashOfConfig":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},"1f5ln2e",{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xhk8fg",{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/reportWebVitals.js",[],["163","164"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/index.tsx",[],["165","166"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/App.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/root/Header.tsx",[],["167","168"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/Match.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Legal.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/root/Footer.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/errorpages/NotFound.tsx",[],["169","170"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/Tweet.tsx",[],["171","172"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Donate.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Landing.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/Mockup.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/About.tsx",[],["173","174"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/Setup.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Mockdata.ts",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/search/Search.tsx",["175"],"import React, { useState } from 'react';\n//import  { Redirect } from 'react-router-dom'\nimport st from './Search.module.scss'\nimport {log} from 'components/Logic'\n\nimport TwitterProfileList from './TwitterProfileList'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport TwitterIcon from 'assets/footer/Twitter_Icon.png'\n\nimport {didUserExceedLimit} from 'components/Logic'\n\nimport {Profile} from 'components/Interfaces'\nimport {LocalStorage} from 'components/Interfaces'\nimport {NotificationType} from 'components/Interfaces'\nimport {TwitterStatus} from 'components/Interfaces'\nimport {ProfilesUsage} from 'components/Interfaces'\n\nconst stateInitArray:Profile[] = []\n\n/*\n//status for step 1\nenum TokenStatus {\n    init,\n    requested,\n    error,\n    //no received, since there is a immediate redirect on receive\n}\n\n//status for saved token from localstorage\nenum TokenVerify {\n    init,\n    pending,\n    fail,\n    success\n}\n*/\n\n//search request type\nenum RequestType {\n    inital,\n    more\n}\n\nlet actionTimestamps:string[] = []\n\nexport default function Search(\n                                addedUsers:Profile[],\n                                addUserFunc:(par1: Profile) => void,\n                                newNotification:(msg:string, notType:NotificationType) => void) \n                                {\n    const [page, setPage] = useState(1);\n    const [userObjects, setUserObjects] = useState(stateInitArray);\n    const [searchInput, setSearchInput] = useState(\"\");\n    const [lastSearchString, setLastSearchString] = useState(\"\");\n    const [searchEnabled, setSearchEnabled] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [twitterStatus, setTwitterStatus] = useState(TwitterStatus.none)\n    //const [tokenStatus, setTokenStatus] = useState(TokenStatus.init)\n    //const [tokenVerifyStatus, setTokenVerifyStatus] = useState(TokenVerify.init)\n    //const [redirectURL, setRedirectURL] = useState('')\n\n    \n    /*\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => {\n\n        \n        //CHECK IF USER ALREADY HAS VALID TOKEN IN LOCAL STORAGE\n        //only verify once\n        if (tokenVerifyStatus !== TokenVerify.init) {\n            return\n        }\n        //verify token & secret\n        setTokenVerifyStatus(TokenVerify.pending)\n        let accessToken = localStorage.getItem(LocalStorage.Access_Token)\n        let accessToken_Secret = localStorage.getItem(LocalStorage.Access_Token_Secret)\n        if (accessToken !== null && accessToken_Secret != null) {\n            log('token & secret available -> verify')\n            verifyCredentials(accessToken, accessToken_Secret)\n                .then(() => {\n                    //success -> enable search\n                    setTwitterStatus(TwitterStatus.signedIn)\n                }) \n                .catch(() => {\n                    setTokenVerifyStatus(TokenVerify.fail)\n                });\n        }\n    });\n    */\n    \n\n    /*\n    ##################################\n    ##################################\n                GENERAL\n    ##################################\n    ##################################\n    */\n\n    //send error notification to setup\n    const showErrNot = (msg: string) => {\n        log(msg)\n        newNotification('Error: ' + msg, NotificationType.Not_Error)\n    }\n\n    const showWarNot = (msg: string) => {\n        log(msg)\n        newNotification('Warning: ' + msg, NotificationType.Not_Warning)\n    }\n\n    //ACTIONS EXCEEDED\n    const actionsExceeded = () => {\n        if (didUserExceedLimit(actionTimestamps, 20, 30000)) {\n            //actions exceeded\n            newNotification('easy boy... small cooldown - too many actions', NotificationType.Not_Warning)\n            return true\n        }\n        //not exceeded -> add timestamp\n        actionTimestamps.push(new Date().toISOString())\n        return false\n    }\n\n    /*\n    ##################################\n    ##################################\n            Search Users\n    ##################################\n    ##################################\n    */\n\n\n    const onSearchButtonClick = (type: RequestType) => {\n\n        if (actionsExceeded()) {\n            return\n        }\n\n        //dont fire mutiple requests\n        if (loading) {\n            showWarNot('already loading')\n            return\n        }\n\n        //check if search string is provided\n        if (!searchEnabled && RequestType.inital) {\n            showErrNot('no input string')\n            return\n        }\n\n        //check if user loads more users or searches for new\n        let qString = \"\"\n        let newPage = -1\n        if (type === RequestType.inital) {\n            setPage(1)\n            newPage = 1\n            qString = searchInput\n\n            //reset user objects\n            let _userObjects = userObjects \n            let length = _userObjects.length\n            while (length >= 0) {\n                _userObjects.pop()\n                length--\n            }\n            setUserObjects(_userObjects) \n            \n        }\n        else if (type === RequestType.more) {\n            newPage = page + 1\n            setPage(newPage)\n            qString = lastSearchString\n        }\n\n        if (qString === \"\" || newPage === -1) {\n            showErrNot('not all query parameters given')\n            return\n        }\n\n        //start request\n        setLoading(true)\n        getUsers(qString, newPage)\n            .then(res => {\n                if (res.status !== 200) {\n                    //error\n                    showErrNot(res.message)\n                    if (res.status === 44) {\n                        //-> no more users to show\n                        showWarNot('no more users available')\n                    }\n                }\n                else {\n                    //success\n                    log('successfully got data for \"' + qString + '\" at page ' + newPage)\n\n                    //if user clicks on more but deleted search string already\n                    if (searchInput.length === 0) {\n                        setLastSearchString(lastSearchString)\n                    }\n                    else {\n                        setLastSearchString(searchInput)\n                    }\n\n                    //append new user objects to current\n                    let _userObjects = userObjects\n                    let concat = _userObjects.concat(res.data)\n                    setUserObjects(concat) \n                }\n                setLoading(false)\n            }) \n            .catch(err => {\n                showErrNot('critical system error occured, check console')\n                log(err)\n                setLoading(false)\n            });\n    }\n\n\n    const getUsers = async (name: string, page: number) => {\n\n        let accessToken = localStorage.getItem(LocalStorage.Access_Token)\n        let accessToken_Secret = localStorage.getItem(LocalStorage.Access_Token_Secret)\n        if (accessToken === null) {\n            accessToken = \"\"\n        }\n        if (accessToken_Secret === null) {\n            accessToken_Secret = \"\"\n        }\n\n        //passing additional parameters in header\n        var requestOptions = {\n            headers: {\n                'q': name,\n                'page': page.toString(),\n                'token': accessToken,\n                'token_secret': accessToken_Secret\n            }\n        };\n        let request = new Request('/api/twitter/users', requestOptions)\n\n        const response = await fetch(request)\n        const body = await response.json()\n        if (response.status !== 200) throw Error(body.message)\n        \n        return body;\n    };\n\n    /*\n    ##################################\n    ##################################\n            Twitter Sign in\n    ##################################\n    ##################################\n    */\n\n    /*\n    const onSignInButtonClicked = async () => {\n\n        //alredy requested\n        if (tokenStatus === TokenStatus.requested) {\n            return\n        }\n\n        log('trying to sign in')\n        setTokenStatus(TokenStatus.requested)\n\n        //userAuth\n        let request = new Request('/api/twitter/request_token')\n        const response = await fetch(request)\n        const body = await response.json()\n        if (body.status !== 200) {\n            showErrNot(body.message) //maybe not body.message \n            setTokenStatus(TokenStatus.error)\n        }\n        else {\n            log(body)\n            //\"oauth_token=i-7ofAAAAAABLx8pAAABd86SI80&\n            //oauth_token_secret=IvoJA3G2XzQ41c9IlfgZb8HHQY8Vw6Rq&oauth_callback_confirmed=true\"\n            let str: string = body.body\n\n            //extract token\n            let search = '='\n            let start = str.indexOf(search) + search.length;\n            let end = str.indexOf('&');\n            let token = str.substring(start, end)\n\n            //extract token_secret\n            search = 'secret='\n            start = str.indexOf(search) + search.length;\n            end = str.lastIndexOf('&');\n            let tokenSecret = str.substring(start, end)\n\n            //extract matchID\n            let current = window.location.href\n            let matchID = current.substr(current.lastIndexOf('/') + 1)\n\n            //reset old access token + secret retrieved in step 3\n            localStorage.removeItem(LocalStorage.Access_Token)\n            localStorage.removeItem(LocalStorage.Access_Token_Secret)\n\n            //save tokens for current step 1\n            localStorage.setItem(LocalStorage.Token, token)\n            localStorage.setItem(LocalStorage.Token_Secret, tokenSecret)\n            localStorage.setItem(LocalStorage.MatchID, matchID)\n\n            //redirect user to: /redirect/:token\n            setRedirectURL('/redirect/' + token)\n            setTwitterStatus(TwitterStatus.tokenReceived)\n            \n        }\n    }\n\n    const verifyCredentials = async (accessToken: string, accessToken_Secret: string) => {\n        //passing additional parameters in header\n        var requestOptions = {\n            headers: {\n                'token': accessToken,\n                'token_secret': accessToken_Secret\n            }\n        };\n        let request = new Request('/api/twitter/verify_token', requestOptions)\n\n        const response = await fetch(request)\n        const body = await response.json()\n        if (body.status !== 200) {\n            showErrNot(body.message) \n            setTokenVerifyStatus(TokenVerify.fail)\n            throw new Error(body)\n        }\n        else {\n            log('valid token & secret')\n            setTokenVerifyStatus(TokenVerify.success)\n            return \"200\";\n        }\n    };\n    */\n\n\n\n    /*\n    ##################################\n    ##################################\n            Handlers\n    ##################################\n    ##################################\n    */\n    const userNameChanged = (name: string) => {\n        setSearchInput(name)\n\n        //check empty or only spaces\n        if (name.length === 0 || !name.trim()) {\n            setSearchEnabled(false)\n        }\n        else {\n            setSearchEnabled(true)\n        }\n    }\n\n    const keyPressed = (event: any) => {\n        if (event.key === 'Enter' && searchInput !== \"\") {\n            onSearchButtonClick(RequestType.inital)\n        }\n    }\n\n\n    /*\n    ##################################\n    ##################################\n            CONTENT\n    ##################################\n    ##################################\n    */\n    const getLoginComponent = () => {\n        /*\n            conditions like 'joinType' have to be passed to the Search component in order to avoid\n            errors in parent component like:\n            -> \"React has detected a change in the order of Hooks\"\n            -> \"Uncaught Invariant Violation: Rendered more hooks than during the previous render\"\n            https://reactjs.org/docs/hooks-rules.html\n        */\n        let rtn = <div></div>\n\n        return rtn\n\n        /*\n        if (twitterStatus === TwitterStatus.none) {\n            //NOT SIGNED IN\n            rtn = \n            <div className={st.Login_Con}>\n                <div className={st.Button_Con} title=\"Sign into your twitter to play your followed profiles\">\n                    <img className={st.Icon} \n                        src={TwitterIcon} \n                        alt=\"Sign into Twitter\" \n                        onClick={() => onSignInButtonClicked()}/>\n                    <button className={st.Search} \n                            onClick={() => onSignInButtonClicked()}>\n                                Sign in\n                    </button>\n                </div>\n                <div className={st.TokenStatus_Con}>\n                    {(tokenStatus === TokenStatus.error) &&\n                        <div>\n                            There was an error receiving the token.\n                        </div>\n                    }\n                    {(tokenStatus === TokenStatus.requested) &&\n                        <CircularProgress/>\n                    }\n                    {(tokenVerifyStatus === TokenVerify.fail) &&\n                        <div>\n                            Previously used user-credentials could not be verified, please sign in again.\n                        </div>\n                    }\n                </div>\n            </div>\n        }\n        else if (twitterStatus === TwitterStatus.tokenReceived) {\n            //FIRST TOKEN RECEIVED\n            rtn = \n                <Redirect to={redirectURL}/>\n        }\n        else if (twitterStatus === TwitterStatus.signedIn) {\n            //SIGNED IN\n            rtn = \n            <div className={st.Login_Con}>\n                You are signed in with your twitter user!\n            </div>\n        }\n        return rtn\n        */\n    }\n\n  return (\n    <div className={st.Con}>\n        {getLoginComponent()}\n        <div className={st.Search_Con}>\n            <div className={st.Top_Con}>\n                <input  className={st.Input} \n                        type=\"search\" \n                        autoComplete=\"off\" \n                        placeholder=\"Enter username or tag...\"\n                        onChange={(e) => userNameChanged(e.target.value)} \n                        onKeyPress={(e) => keyPressed(e)}/>\n                {searchEnabled && \n                    <div className={st.Button_Con}>\n                        <img className={st.Icon} \n                            src={TwitterIcon} \n                            alt=\"Twitter\" \n                            onClick={(e) => onSearchButtonClick(RequestType.inital)}/>\n                        <button className={st.Search} \n                                onClick={(e) => onSearchButtonClick(RequestType.inital)}>\n                                    Search\n                        </button>\n                    </div>\n                }\n            </div>\n            {userObjects.length === 0 &&\n                <div className={st.EmptyResults_Con}>\n                    Search for public Twitter profiles and add them by clicking the card.\n                </div>\n            }\n            {userObjects.length !== 0  && \n                <div className={st.List_Con}>\n                    <TwitterProfileList\n                        parentType={ProfilesUsage.Search}\n                        data={userObjects}\n                        addedUsers={addedUsers}\n                        onAddUser={addUserFunc}\n                        onRemoveUser={() => {}}\n                        twitterStatus = {twitterStatus}\n                    />\n                    {(userObjects.length % 20 === 0) && \n                        <div className={st.More_Con}>\n                            <button className={st.More} \n                                    onClick={(e) => onSearchButtonClick(RequestType.more)}>\n                                Show more...\n                            </button>\n                            {loading && //\"more\" loading\n                                <div className={st.Loading_Con}>\n                                    <CircularProgress/>\n                                </div>\n                            }\n                        </div>\n                    }\n                </div>\n            }\n            {loading && userObjects.length === 0 && //\"inital\" loading\n            <div className={st.Loading_Con}>\n                <CircularProgress/>\n            </div>\n            }\n        </div>\n    </div>\n  );\n}\n\n\n\n/*\n\n\n\n\n\n\n*/\n",["176","177"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/pages/Nav_Ranking.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/Nav.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/Images.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/BottomPart.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/pages/Nav_Answers.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/players/Players.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/chat/Chat.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/TopPart.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Interfaces.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Credits.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/Extensions.js",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/interaction/Interaction.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Logic.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/TwitterRedirect.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/TwitterCallback.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/join/Join.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/search/TwitterProfileList.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/info/Info.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/lobby/profiles/Profiles.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/lobby/settings/Settings.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/lobby/Lobby.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/join/PusherClient.tsx",[],{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"178","replacedBy":"182"},{"ruleId":"180","replacedBy":"183"},{"ruleId":"178","replacedBy":"184"},{"ruleId":"180","replacedBy":"185"},{"ruleId":"178","replacedBy":"186"},{"ruleId":"180","replacedBy":"187"},{"ruleId":"178","replacedBy":"188"},{"ruleId":"180","replacedBy":"189"},{"ruleId":"178","replacedBy":"190"},{"ruleId":"180","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":57,"column":27,"nodeType":"194","messageId":"195","endLine":57,"endColumn":43},{"ruleId":"178","replacedBy":"196"},{"ruleId":"180","replacedBy":"197"},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],["198"],["199"],["198"],["199"],["198"],["199"],["198"],["199"],["198"],["199"],"@typescript-eslint/no-unused-vars","'setTwitterStatus' is assigned a value but never used.","Identifier","unusedVar",["198"],["199"],"no-global-assign","no-unsafe-negation"]