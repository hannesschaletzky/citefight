[{"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/reportWebVitals.js":"1","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/index.tsx":"2","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/App.tsx":"3","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Legal.tsx":"4","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/errorpages/NotFound.tsx":"5","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Donate.tsx":"6","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Landing.tsx":"7","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/About.tsx":"8","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Mockdata.ts":"9","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Interfaces.tsx":"10","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Credits.tsx":"11","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/Extensions.js":"12","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Logic.tsx":"13","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/TwitterRedirect.tsx":"14","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pusher/Pusher.tsx":"15","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/1_join/Join.tsx":"16","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/Match.tsx":"17","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/Setup.tsx":"18","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/lobby/Lobby.tsx":"19","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/players/Players.tsx":"20","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/lobby/profiles/Profiles.tsx":"21","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/add/search/Search.tsx":"22","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/0_root/Footer.tsx":"23","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/tweet/Tweet.tsx":"24","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/TwitterCallback.tsx":"25","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/add/Add.tsx":"26","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/nav/pages/Nav_Ranking.tsx":"27","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/0_root/Header.tsx":"28","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/Countdown.tsx":"29","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/nav/Nav.tsx":"30","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/nav/pages/Ranking.tsx":"31","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/chat/Chat.tsx":"32","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/settings/Settings.tsx":"33","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/notification/Notification.tsx":"34","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/interaction/Interaction.tsx":"35","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/profiles/TwitterProfileList.tsx":"36","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/add/popular/PopularProfiles.tsx":"37"},{"size":362,"mtime":1612013307768,"results":"38","hashOfConfig":"39"},{"size":500,"mtime":1612016004776,"results":"40","hashOfConfig":"39"},{"size":4111,"mtime":1615972466665,"results":"41","hashOfConfig":"39"},{"size":401,"mtime":1611867431112,"results":"42","hashOfConfig":"39"},{"size":500,"mtime":1612823136652,"results":"43","hashOfConfig":"39"},{"size":322,"mtime":1612820947127,"results":"44","hashOfConfig":"39"},{"size":1268,"mtime":1614952082500,"results":"45","hashOfConfig":"39"},{"size":318,"mtime":1612820938975,"results":"46","hashOfConfig":"39"},{"size":4783,"mtime":1615972421337,"results":"47","hashOfConfig":"39"},{"size":1803,"mtime":1615970939013,"results":"48","hashOfConfig":"39"},{"size":618,"mtime":1612820967289,"results":"49","hashOfConfig":"39"},{"size":2319,"mtime":1613140824619,"results":"50","hashOfConfig":"51"},{"size":1242,"mtime":1615821823303,"results":"52","hashOfConfig":"39"},{"size":741,"mtime":1614952081828,"results":"53","hashOfConfig":"39"},{"size":3005,"mtime":1616085453400,"results":"54","hashOfConfig":"39"},{"size":10072,"mtime":1615414717454,"results":"55","hashOfConfig":"39"},{"size":36718,"mtime":1616170367461,"results":"56","hashOfConfig":"39"},{"size":46278,"mtime":1616013844986,"results":"57","hashOfConfig":"39"},{"size":2528,"mtime":1615825469410,"results":"58","hashOfConfig":"39"},{"size":1901,"mtime":1615980152547,"results":"59","hashOfConfig":"39"},{"size":1045,"mtime":1615905875303,"results":"60","hashOfConfig":"39"},{"size":16954,"mtime":1615905614965,"results":"61","hashOfConfig":"39"},{"size":2213,"mtime":1613086149703,"results":"62","hashOfConfig":"39"},{"size":15252,"mtime":1616087190843,"results":"63","hashOfConfig":"39"},{"size":5825,"mtime":1615330372304,"results":"64","hashOfConfig":"39"},{"size":2493,"mtime":1615906038379,"results":"65","hashOfConfig":"39"},{"size":6749,"mtime":1612814305974,"results":"66","hashOfConfig":"39"},{"size":491,"mtime":1614904469938,"results":"67","hashOfConfig":"39"},{"size":2120,"mtime":1616085176682,"results":"68","hashOfConfig":"39"},{"size":3613,"mtime":1616076878380,"results":"69","hashOfConfig":"39"},{"size":1112,"mtime":1615819082811,"results":"70","hashOfConfig":"39"},{"size":8058,"mtime":1615970965979,"results":"71","hashOfConfig":"39"},{"size":9269,"mtime":1616081520771,"results":"72","hashOfConfig":"39"},{"size":2525,"mtime":1615902467076,"results":"73","hashOfConfig":"39"},{"size":4182,"mtime":1615826052311,"results":"74","hashOfConfig":"39"},{"size":8361,"mtime":1616080817943,"results":"75","hashOfConfig":"39"},{"size":685,"mtime":1615905909763,"results":"76","hashOfConfig":"39"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},"1f5ln2e",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xhk8fg",{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"87"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"110"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"82"},"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/reportWebVitals.js",[],["162","163"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/index.tsx",[],["164","165"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/App.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Legal.tsx",[],["166","167"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/errorpages/NotFound.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Donate.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Landing.tsx",[],["168","169"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/About.tsx",[],["170","171"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Mockdata.ts",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Interfaces.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Credits.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/Extensions.js",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Logic.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/TwitterRedirect.tsx",[],["172","173"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pusher/Pusher.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/1_join/Join.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/Match.tsx",["174"],"/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useRef, useEffect, useState, useReducer } from 'react';\nimport  { Redirect } from 'react-router-dom'\nimport st from './Match.module.scss'\nimport {log, logErr, logObjectPretty} from 'components/Logic'\n//UI Elements\nimport CircularProgress from '@material-ui/core/CircularProgress'\n//interfaces\nimport {LocalStorage} from 'components/Interfaces'\nimport {Player} from 'components/Interfaces'\nimport {Profile} from 'components/Interfaces'\nimport {Tweet} from 'components/Interfaces'\nimport {ChatMsg, SysMsgType} from 'components/Interfaces'\n//functional interfaces\nimport {MatchProps} from 'components/Functional_Interfaces'\n//logic\nimport {isValidMatchID} from 'components/Logic'\n//pusher\nimport * as Pu from 'components/pusher/Pusher'\n//components\nimport Players from '../2_setup/players/Players'\nimport Nav, {NavProps} from './nav/Nav'\nimport Countdown from './Countdown'\nimport * as Chat from 'components/00_shared/chat/Chat'\nimport * as Settings from 'components/00_shared/settings/Settings'\nimport * as Not from 'components/00_shared/notification/Notification'\nimport * as TweetComp from './tweet/Tweet'\n\ninterface RoundSolution {\n    t_userName: string\n    t_userTag: string\n    t_userVerified: boolean\n    t_profileURL: string\n    t_userPicURL: string\n    t_tweetURL: string\n}\nconst init_roundSolution: RoundSolution = {\n    t_userName: '',\n    t_userTag: '',\n    t_userVerified: false,\n    t_profileURL: '',\n    t_userPicURL: '',\n    t_tweetURL: ''\n} \n\nenum Status {\n    init,\n    everyoneJoined,\n    everyoneReady,\n    calcRound,\n    startRoundcountdown,\n    showRound,\n    showRound_OwnPick,\n    showRound_Solution,\n    \n    //errors\n    errorInitalValues\n}\n\n//STATE\ninterface State {\n    matchID: string\n    status: Status\n    statusMsg: string //for everyone joined\n\n    startCountdown: number\n    roundIndex: number\n    roundStarts: Date\n    roundEnds: Date\n    roundCountdown: number\n    roundActive: boolean\n    roundSolution: RoundSolution\n}\nconst init_state:State = {\n    matchID: '',\n    status: Status.init,\n    statusMsg: '',\n    startCountdown: -1,\n    roundIndex: -1,\n    roundStarts: new Date(),\n    roundEnds: new Date(),\n    roundCountdown: -1,\n    roundActive: false,\n    roundSolution: init_roundSolution\n}\n\n//MATRIX\ninterface Point {\n    goal: string        //target usertag\n    answer: string      //chosen usertag\n    correct: boolean    //evaluation\n    timeMS: number      //answer time in Milliseconds\n    ready: boolean\n}\nconst init_matrix:{[index:string] : Point[]} = {}\ninterface Event_Matrix_Data {\n    player: string\n    round: number\n    point: Point\n}\ninterface Event_Matrix {\n    type: Pu.EventType\n    data: Event_Matrix_Data\n}\n\n//DATA\nconst init_userName = \"\"\nconst init_profiles:Profile[] = []\nconst init_players:Player[] = []\nconst init_tweets:Tweet[] = []\nconst init_chat:ChatMsg[] = []\n\nexport default function Match(props:MatchProps) {\n    //state\n    const [redirectToJoin,setRedirectToJoin] = useState(false)\n    const [validMatchID,setValidMatchID] = useState(true)\n    //refs\n    const ref_username = useRef(init_userName)\n    const ref_state = useRef(init_state)\n    const ref_matrix = useRef(init_matrix)\n    const ref_tweets = useRef(init_tweets)\n    const ref_profiles = useRef(init_profiles)\n    const ref_settings_lobby = useRef(Settings.initSettings_Lobby)\n    const ref_settings_match = useRef(Settings.initSettings_Match)\n    const ref_notification = useRef(Not.init)\n    const ref_players = useRef(init_players)\n    const ref_chat = useRef(init_chat)\n    const ref_HoverPic = useRef('')\n    //pusher refs\n    const ref_pusherClient = useRef(Pu.init_pusherCient)\n    const ref_pusherChannel = useRef(Pu.init_pusherChannel)\n    const ref_pusherState = useRef(Pu.State.init)\n    const [,forceUpdate] = useReducer(x => x + 1, 0);\n\n\tuseEffect(() => {\n\n        //check if given MatchID is invalid\n        let matchID = isValidMatchID(window.location.href)\n        if (!matchID) {\n            setValidMatchID(false)\n            return\n        }\n        ref_state.current.matchID = matchID\n\n        //get pusherclient (only at first loading -> .init)\n        if (props.pusherClient === null && ref_pusherState.current === Pu.State.init) {\n            log('no pusher client -> redirect to join')\n            setRedirectToJoin(true)\n            return\n        }\n\n        //at first loading -> do init stuff (set values, cache images, create matrix, ...)\n        if (ref_state.current.status === Status.init) {\n            if (ref_tweets.current === init_tweets) {\n                setInitialValues(ref_tweets, LocalStorage.Trans_Tweets)\n                /*\n                //mock\n                for(let i=0;i<ref_tweets.current.length;i++) {\n                    if (i===0) {\n                        ref_tweets.current[i].c_photo1 = \"https://pbs.twimg.com/media/EsWwrpuW8AIRn_q.jpg\"\n                        ref_tweets.current[i].c_photo2 = \"\" \n                        ref_tweets.current[i].c_photo3 = \"\" \n                        ref_tweets.current[i].c_photo4 = \"\" \n                    }\n                    if (i===1) {\n                        ref_tweets.current[i].c_photo1 = \"https://pbs.twimg.com/media/EsWwrpuW8AIRn_q.jpg\"\n                        ref_tweets.current[i].c_photo2 = \"https://pbs.twimg.com/media/EsWwrpvXEAAeKSW.jpg\" \n                        ref_tweets.current[i].c_photo3 = \"\" \n                        ref_tweets.current[i].c_photo4 = \"\" \n                    }\n                    if (i===2) {\n                        ref_tweets.current[i].c_photo1 = \"https://pbs.twimg.com/media/EsWwrpuW8AIRn_q.jpg\"\n                        ref_tweets.current[i].c_photo2 = \"https://pbs.twimg.com/media/EsWwrpvXEAAeKSW.jpg\" \n                        ref_tweets.current[i].c_photo3 = \"https://pbs.twimg.com/media/EsWwrpmW8AALVuN.jpg\" \n                        ref_tweets.current[i].c_photo4 = \"\" \n                    }\n                    if (i===3) {\n                        ref_tweets.current[i].c_photo1 = \"https://pbs.twimg.com/media/EsWwrpuW8AIRn_q.jpg\"\n                        ref_tweets.current[i].c_photo2 = \"https://pbs.twimg.com/media/EsWwrpvXEAAeKSW.jpg\" \n                        ref_tweets.current[i].c_photo3 = \"https://pbs.twimg.com/media/EsWwrpmW8AALVuN.jpg\" \n                        ref_tweets.current[i].c_photo4 = \"https://pbs.twimg.com/media/EsWwrppW4AQrA4z.jpg\" \n                    }\n                }\n                */\n            }\n            if (ref_profiles.current === init_profiles) {\n                setInitialValues(ref_profiles, LocalStorage.Trans_Profiles)\n            }\n            if (ref_players.current === init_players) {\n                setInitialValues(ref_players, LocalStorage.Trans_Players)\n                //set everyone to unready\n                ref_players.current.forEach((player) => {\n                    player.ready = false\n                })\n            }\n            if (ref_settings_lobby.current === Settings.initSettings_Lobby) {\n                setInitialValues(ref_settings_lobby, LocalStorage.Trans_Settings)\n                //set roundtime\n                ref_state.current.roundCountdown = ref_settings_lobby.current.roundtime\n            }\n            if (ref_username.current === init_userName) {\n                setInitialValues(ref_username, LocalStorage.Username)\n            }\n\n            //dont cache images when set to Off\n            if (ref_settings_lobby.current.pictures !== Settings.Pictures.Off) {\n                cacheImages()\n            }\n            createMatrix()\n\n            //set welcome chat messages\n            if (ref_chat.current.length === 0) {\n                addSysMsg(SysMsgType.welcome, '🎉🎉🎉 Welcome to the Match 🎉🎉🎉')\n                addSysMsg(SysMsgType.welcome, 'Set yourself ready and lets go!')\n            }\n\n            //retrieve & set pusherclient\n            if (ref_pusherClient.current === null) {\n                ref_pusherClient.current = props.pusherClient\n                log('match: retrieved and set pusher client')\n                joinGame()\n            }\n        }\n        \n  \t})\n\n    /*\n    ##################################\n    ##################################\n                INIT\n    ##################################\n    ##################################\n    */\n\n    //set initial values passed from setup\n    const setInitialValues = (ref:React.MutableRefObject<any>, type:LocalStorage) => {\n        let data = sessionStorage.getItem(type)\n        if (data !== null) {\n            if (type === LocalStorage.Username) {\n                ref.current = data\n            }\n            else {\n                ref.current = JSON.parse(data)\n            }\n            sessionStorage.removeItem(type)\n            log(ref.current)\n        }\n        else {\n            //CRITIAL ERROR -> could not set inital values\n            logErr(type + ' is null! Inital Values from Setup not retrieved')\n            setStatus(Status.errorInitalValues, true)\n        }\n    }\n\n    const cacheImages = () => {\n        //cache images\n        let imageUrls:string[] = []\n        for(let i=0;i<ref_tweets.current.length;i++) {\n            let t = ref_tweets.current[i]\n            if (t.c_photo1 !== \"\") {imageUrls.push(t.c_photo1)}\n            if (t.c_photo2 !== \"\") {imageUrls.push(t.c_photo2)}\n            if (t.c_photo3 !== \"\") {imageUrls.push(t.c_photo3)}\n            if (t.c_photo4 !== \"\") {imageUrls.push(t.c_photo4)}\n        }\n        log('caching images')\n        imageUrls.forEach((picURL) => {\n            new Image().src = picURL\n        })\n        log(imageUrls.length + ' images cached!')\n    }\n\n    const createMatrix = () => {\n\n        if (ref_tweets.current.length === 0 || ref_players.current.length === 0) {\n            //CRITIAL ERROR -> could not set inital values\n            logErr('ref_tweets or ref_players not set! Inital Values from Setup not retrieved')\n            setStatus(Status.errorInitalValues, true)\n            return\n        }\n\n        //one row for each player\n        ref_players.current.forEach((player) => {\n            //create target array\n            let points:Point[] = []\n            for(let i=0;i<ref_settings_lobby.current.rounds;i++) {\n                let point:Point = {\n                    goal: ref_tweets.current[i].t_userTag,\n                    answer: '',\n                    correct: false,\n                    timeMS: -1,\n                    ready: false\n                }\n                points.push(point)\n            }\n            //assign \n            ref_matrix.current[player.name] = points\n        })\n        log('created matrix')\n        log(ref_matrix.current) \n    }\n\n    /*\n    ##################################\n    ##################################\n                GENERAL\n    ##################################\n    ##################################\n    */\n\n    const addSysMsg = (type:SysMsgType, inputMsg:string) => {\n        Chat.addSysMsg(type, inputMsg, ref_chat)\n    }\n\n    const userIsReady = ():boolean => {\n        for(let i=0;i<ref_players.current.length;i++) {\n            let player = ref_players.current[i]\n            if (player.name === ref_username.current) {\n                return player.ready\n            }\n        }\n        return false\n    }\n\n    const getMatchName = ():string => {\n        return Pu.Channel_Match + ref_state.current.matchID\n    }\n    \n    const setPusherState = (state:Pu.State) => {\n        //log('set state to: ' + state)\n        ref_pusherState.current = state\n        forceUpdate()\n    }\n\n    const setStatus = (newStatus:Status, update:boolean = false) => {\n        ref_state.current.status = newStatus\n        if (update) {forceUpdate()} \n    }\n\n    const isAdmin = ():boolean => {\n        if (ref_username.current !== null && ref_players.current.length > 0) {\n            if (ref_username.current === ref_players.current[0].name) {\n                return true\n            }\n            return false\n        }\n        return true\n    }\n\n    const showNotification = (msg:string, notType:Not.Type, update:boolean=true)  => {\n        let newNot:Not.Notification = {\n            id: new Date().toISOString(),\n            type: notType,\n            msg: msg,\n            disapearAfter: 5000\n        }\n        //update UI\n        ref_notification.current = newNot\n        if (update) {forceUpdate()}\n    }\n\n    const pictureClick = (newPic:string) => {\n        if (ref_HoverPic.current === \"\") {\n            //log('show')\n            ref_HoverPic.current = newPic\n        }\n        else {\n            //log('hide')\n            ref_HoverPic.current = \"\"\n        }\n        forceUpdate()\n    }\n\n    /*\n    ##################################\n    ##################################\n            JOIN && LEAVE \n    ##################################\n    ##################################\n    */\n    const joinGame = () => {\n\n        //bind to connection state change events\n        ref_pusherClient.current.connection.bind(Pu.Conn_State_Change, (states:any) => {\n            //states = {previous: 'oldState', current: 'newState'}\n            log('new pusher state from event \"state_change\": ' + states.current)\n            setPusherState(states.current) \n        })\n\n        //sub to events of lobby if connected\n        if (ref_pusherClient.current.connection.state === Pu.State.connected) {\n\n            //unsubscribe from lobby channel first\n            let name:string = Pu.Channel_Lobby + ref_state.current.matchID\n            ref_pusherClient.current.unsubscribe(name)\n\n            //sub to match channel\n            name = getMatchName()\n            const channel = props.pusherClient.subscribe(name)\n            channel.bind(Pu.Channel_Member_Removed, //left\n                (member:any) => userLeft(member.id)\n            )\n            channel.bind(Pu.Channel_Member_Added,   //joined\n                () => checkIfEveryoneJoined()\n            )\n            channel.bind(Pu.Channel_Sub_Fail, (err:any) => {\n                logObjectPretty(err)\n                setPusherState(Pu.State.failed) \n            })\n            channel.bind(Pu.Channel_Sub_Success, () => {\n                log('MATCH: sub to: ' + channel.name)\n\n                channel.bind(Pu.EventType.Match_State, \n                    (data:Pu.Event) => handleEvent_State(data)\n                )\n                channel.bind(Pu.EventType.Matrix, \n                    (data:Event_Matrix) => handleEvent_Matrix(data)\n                )\n                /*\n                channel.bind(Pu.EventType.Player, \n                    (data:Pu.Event) => handleEvent_Players(data)\n                )\n                */\n                channel.bind(Pu.EventType.Chat, \n                    (data:Pu.Event) => handleEvent_Chat(data)\n                )\n\n                //set channel\n                ref_pusherChannel.current = channel\n                \n                //start next step\n                setPusherState(Pu.State.connected)\n                checkIfEveryoneJoined()\n            })\n        }\n    }\n\n    const userLeft = (memberID:string) => {\n        //member id -> e.g. 2021-03-09T01:38:42.941Z7\n        ref_players.current.forEach((item:Player, i) => {\n            if (item.pusherID === memberID) {\n                ref_players.current.splice(i,1)\n                forceUpdate()\n                return\n            }\n        })\n    }\n\n    /*\n    ##################################\n    ##################################\n            Flow\n    ##################################\n    ##################################\n    */\n\n    //1ST: Check if everyone is in matchroom\n    const checkIfEveryoneJoined = () => {\n        //first user handles\n        if (isAdmin()) {\n            let members:any[] = ref_pusherChannel.current.members.members\n            log(members)\n            \n            //determine missing players\n            let playersLeft = ''\n            let statusMsg = ''\n            ref_players.current.forEach((player) => {\n                if (!(player.pusherID in members)) {\n                    playersLeft += player.name + ', '\n                }\n            })\n            //determine action + broadcast \n            if (playersLeft !== '') {\n                playersLeft = playersLeft.substring(0, playersLeft.length - 2) //remove last ,\n                statusMsg = `Waiting for: ${playersLeft} to enter the Matchroom`\n                log(statusMsg)\n                ref_state.current.status = Status.everyoneJoined\n                ref_state.current.statusMsg = statusMsg\n                fireEvent_State()\n            }\n            else {\n                log('everyone joined -> start first round')\n                /*\n                    fire after timeout to avoid having another \n                    call with Status.everyoneJoined coming in afterwards\n                */\n                setTimeout(() => {\n                    setStatus(Status.everyoneJoined)\n                    ref_state.current.statusMsg = 'Everyone joined, starting...'\n                    fireEvent_State()\n                }, 500) \n                setTimeout(() => {\n                    setStatus(Status.calcRound)\n                    ref_state.current.statusMsg = statusMsg\n                    fireEvent_State()\n                }, 2500) \n            }\n        }\n    }\n\n    //2ND: Calculate start of new round and trigger countdown\n    const calculateRound = () => {\n        //increment round\n        ref_state.current.roundIndex += 1\n\n        //round start/end time\n        let startCountdown = 3\n        let start = new Date()\n        let end = new Date()\n        //start\n        start.setSeconds(start.getSeconds() + startCountdown)\n        ref_state.current.roundStarts = start\n        //end\n        end.setSeconds(end.getSeconds() + startCountdown + ref_settings_lobby.current.roundtime)\n        ref_state.current.roundEnds = end\n\n        //start round-countdown\n        setStatus(Status.startRoundcountdown)\n        fireEvent_State()\n    }\n\n    //3RD: Calculate start of new round and trigger countdown\n    const startRoundCountdown = () => {\n\n        //ADJUST TO CALCULATE FOR ROUND START DATE FROM STATE ETC!!!!!!!!\n\n        log('start round countdown')\n        \n        //reset countdown\n        let diffS = 5\n        ref_state.current.startCountdown = diffS\n        forceUpdate()\n        \n        //logic for decrease timeout\n        const decrease = () => {\n            ref_state.current.startCountdown -= 1\n            forceUpdate()\n        }\n\n        /*\n        FROM HERE INTO LOGIC MODULE AND REMOVE COUNTDOWN COMPONENT\n        */\n        //last call\n        setTimeout(() => {\n            decrease()\n            showRound()\n        }, diffS*1000)\n        //intermediate calls\n        let span = 1000\n        while (diffS > 1) { //>1 -> skip last call\n            setTimeout(() => {\n                decrease()\n            }, span)\n            span += 1000\n            diffS -= 1\n        }\n        /*\n        UNTIL HERE\n        */\n    }\n\n    //4TH: SHOW ROUND\n    const showRound = () => {\n\n        //calc differnce until target date\n        let diffS = ref_settings_lobby.current.roundtime\n\n        //logic for decrease timeout\n        const decrease = () => {\n            if (ref_state.current.status === Status.showRound || \n                ref_state.current.status === Status.showRound_OwnPick) {\n                    ref_state.current.roundCountdown -= 1\n                    forceUpdate()\n            }\n        }\n        /*\n        FROM HERE INTO LOGIC MODULE AND REMOVE COUNTDOWN COMPONENT\n        */\n        //last call\n        setTimeout(() => {\n            decrease()\n            showRoundSolution()\n        }, diffS*1000)\n        //intermediate calls\n        let span = 1000\n        while (diffS > 1) { //>1 -> skip last call\n            setTimeout(() => {\n                decrease()\n            }, span)\n            span += 1000\n            diffS -= 1\n        }\n        /*\n        UNTIL HERE\n        */\n\n        //save solution of round\n        let cur = ref_tweets.current[ref_state.current.roundIndex]\n        ref_state.current.roundSolution.t_userName = cur.t_userName\n        ref_state.current.roundSolution.t_userTag = cur.t_userTag\n        ref_state.current.roundSolution.t_userVerified = cur.t_userVerified\n        ref_state.current.roundSolution.t_profileURL = cur.t_profileURL\n        ref_state.current.roundSolution.t_userPicURL = cur.t_userPicURL\n        ref_state.current.roundSolution.t_tweetURL = cur.t_tweetURL\n\n        //hide solution in current\n        ref_tweets.current[ref_state.current.roundIndex].t_userName = '???'\n        ref_tweets.current[ref_state.current.roundIndex].t_userTag = '???'\n        ref_tweets.current[ref_state.current.roundIndex].t_userVerified = true\n        ref_tweets.current[ref_state.current.roundIndex].t_profileURL = ''\n        ref_tweets.current[ref_state.current.roundIndex].t_userPicURL = ''\n        ref_tweets.current[ref_state.current.roundIndex].t_tweetURL = ''\n\n        log(`show round with index ${ref_state.current.roundIndex}`)\n        ref_state.current.roundActive = true\n        setStatus(Status.showRound, true)\n    }\n\n    //5TH: SHOW OWN PICK\n    const showOwnSelection = (pick:Profile) => {\n\n        //set own pick in current\n        ref_tweets.current[ref_state.current.roundIndex].t_userName = pick.name\n        ref_tweets.current[ref_state.current.roundIndex].t_userTag = pick.screen_name\n        ref_tweets.current[ref_state.current.roundIndex].t_userVerified = pick.verified\n        ref_tweets.current[ref_state.current.roundIndex].t_profileURL = \"https://twitter.com/\" + pick.screen_name\n        ref_tweets.current[ref_state.current.roundIndex].t_userPicURL = pick.profile_image_url_https\n        ref_tweets.current[ref_state.current.roundIndex].t_tweetURL = ''\n        \n        //calculate new point\n        let point:Point = ref_matrix.current[ref_username.current][ref_state.current.roundIndex]\n        point.answer = pick.screen_name\n        point.correct = (point.answer === point.goal)\n        point.timeMS = 12345 //@@@ TODO!!!\n        //set\n        //ref_matrix.current[ref_username.current][ref_state.current.roundIndex] = point\n        //broadcast\n        fireEvent_Matrix(point)\n\n        //update UI\n        log('show pick: ' + pick.name)\n        setStatus(Status.showRound_OwnPick, true)\n    }\n\n    //6TH: SHOW ROUND SOLUTION\n    const showRoundSolution = () => {\n\n        //set solution in current\n        ref_tweets.current[ref_state.current.roundIndex].t_userName = ref_state.current.roundSolution.t_userName\n        ref_tweets.current[ref_state.current.roundIndex].t_userTag = ref_state.current.roundSolution.t_userTag\n        ref_tweets.current[ref_state.current.roundIndex].t_userVerified = ref_state.current.roundSolution.t_userVerified\n        ref_tweets.current[ref_state.current.roundIndex].t_profileURL = ref_state.current.roundSolution.t_profileURL\n        ref_tweets.current[ref_state.current.roundIndex].t_userPicURL = ref_state.current.roundSolution.t_userPicURL\n        ref_tweets.current[ref_state.current.roundIndex].t_tweetURL = ref_state.current.roundSolution.t_tweetURL\n\n        //remove temp values in solution\n        ref_state.current.roundSolution.t_userName = ''\n        ref_state.current.roundSolution.t_userTag = ''\n        ref_state.current.roundSolution.t_userVerified = false\n        ref_state.current.roundSolution.t_profileURL = ''\n        ref_state.current.roundSolution.t_userPicURL = ''\n        ref_state.current.roundSolution.t_tweetURL = ''\n\n        //reset vars\n        ref_state.current.roundCountdown = ref_settings_lobby.current.roundtime ///WORKING???\n        //show solution\n        log('show solution')\n        ref_state.current.roundActive = false\n        setStatus(Status.showRound_Solution, true)\n    }\n\n    //7TH: SET READY (-> next round if everyone ready)\n    const setYourselfReady = () => {\n        let point:Point = ref_matrix.current[ref_username.current][ref_state.current.roundIndex]\n        point.ready = true\n        fireEvent_Matrix(point)\n    }\n\n    /*\n    ##################################\n    ##################################\n            EVENT: State\n    ##################################\n    ##################################\n    */\n    const handleEvent_State = (event:Pu.Event) => {\n        //check type-mismatch\n        if (event.type !== Pu.EventType.Match_State) {\n            log('EventType mismatch in handleEvent_State:\\n\\n' + event)\n            return\n        }\n        //set new state\n        let newState:State = event.data\n        //log('new state retrieved')\n        //log(newState)\n        ref_state.current = newState\n        forceUpdate()\n\n        //start round countdown\n        if (ref_state.current.status === Status.startRoundcountdown) {\n            startRoundCountdown()\n        }\n\n        //ADMIN calculates round\n        if (isAdmin()) {\n            if (ref_state.current.status === Status.calcRound) {\n                calculateRound()\n            }\n        }\n    }\n\n    const fireEvent_State = async () => {\n        //prepare\n        let event:Pu.Event = {\n            type: Pu.EventType.Match_State,\n            data: ref_state.current\n        }\n        //trigger\n        Pu.triggerEvent(getMatchName(), event.type, event)\n    }\n\n    /*\n    ##################################\n    ##################################\n            EVENT: Matrix\n    ##################################\n    ##################################\n    */\n    const handleEvent_Matrix = (event:Event_Matrix) => {\n        //security\n        if (event.type !== Pu.EventType.Matrix) {\n            log('EventType mismatch in handleEvent_Matrix:\\n\\n' + event)\n            return\n        }\n        //set new matrix point\n        let d:Event_Matrix_Data = event.data\n        ref_matrix.current[d.player][d.round] = d.point\n        log('new point:')\n        log(ref_matrix.current)\n\n        //ADMIN starts next round if everyone is ready\n        if (isAdmin() && ref_state.current.status === Status.showRound_Solution) {\n\n            //CHECK IF EVERYONE IS READY MISSING!!!!\n\n            log('everyone ready -> next round')\n            setStatus(Status.calcRound)\n            fireEvent_State()\n        }\n    }\n\n    const fireEvent_Matrix = async (point:Point) => {\n        //prepare\n        let data:Event_Matrix_Data = {\n            player: ref_username.current,\n            round: ref_state.current.roundIndex,\n            point: point\n        }\n        let event:Event_Matrix = {\n            type: Pu.EventType.Matrix,\n            data: data\n        }\n        //trigger\n        Pu.triggerEvent(getMatchName(), event.type, event)\n    }\n\n    /*\n    ##################################\n    ##################################\n            EVENT: Players\n    ##################################\n    ##################################\n    \n    const handleEvent_Players = (event:Pu.Event) => {\n        //security\n        if (event.type !== Pu.EventType.Player) {\n            log('EventType mismatch in handleEvent_Player:\\n\\n' + event)\n            return\n        }\n        //set new players\n        let newPlayers:Player[] = event.data\n        ref_players.current = newPlayers\n        forceUpdate()\n    }\n\n    const fireEvent_Players = async () => {\n        //prepare\n        let event:Pu.Event = {\n            type: Pu.EventType.Player,\n            data: ref_players.current\n        }\n        //trigger\n        Pu.triggerEvent(getMatchName(), event.type, event)\n    }\n    */\n\n    /*\n    ##################################\n    ##################################\n        EVENT: Chat\n    ##################################\n    ##################################\n    */\n    const handleEvent_Chat = (event:Pu.Event) => {\n\n        //security\n        if (event.type !== Pu.EventType.Chat) {\n            log('EventType mismatch in handleEvent_Chat:\\n\\n' + event)\n            return\n        }\n\n        //set new chat\n        let newChat:ChatMsg[] = event.data\n        log('total msgs: ' + newChat.length)\n        ref_chat.current = newChat\n        forceUpdate()\n    }\n\n    const fireEvent_Chat = async () => {\n\n        //prepare\n        ref_chat.current = Chat.cutToSizeLimit(ref_chat.current)\n        let event:Pu.Event = {\n            type: Pu.EventType.Chat,\n            data: ref_chat.current\n        }\n        //trigger\n        Pu.triggerEvent(getMatchName(), event.type, event)\n    }\n\n    /*\n    ##################################\n    ##################################\n        PASSED TO CHILD COMP \n    ##################################\n    ##################################\n    */\n    const onSelectAnswer = (profile:Profile) => {\n        showOwnSelection(profile) \n    }\n\n    const onNewChatMessage = (newMsg:ChatMsg) => {\n        newMsg.n = ref_username.current //chat component does not know/set user name\n        ref_chat.current.push(newMsg)\n        fireEvent_Chat()\n    }\n    const onSettingsChanged = (newSettings:Settings.Settings_Match) => {\n        ref_settings_match.current = newSettings\n        forceUpdate()\n    }\n\n    /*\n    ##################################\n    ##################################\n                  UI \n    ##################################\n    ##################################\n    */\n\n    const getOverlayContent = () => {\n\n        let content = <div></div>\n\n        if (!validMatchID) {\n            content =  \n                <div className={st.State_Con}>\n                    Invalid Match ID! Double check the URL, only numbers allowed\n                </div>\n            return content\n        }\n\n        //redirect back to join page\n        if (redirectToJoin) {\n            let redirectURL = '/join/' + ref_state.current.matchID\n            return <Redirect to={redirectURL}/>\n        }\n        \n        /*\n        ######################\n            PUSHER STATE\n        ######################\n        */\n        //loading\n        if (ref_pusherState.current === Pu.State.init ||\n            ref_pusherState.current === Pu.State.connecting) {\n            return content =  \n                <div className={st.State_Con}>\n                    <CircularProgress/>\n                </div>\n        }\n        //error\n        else if (ref_pusherState.current !== Pu.State.connected) {\n            return content =  \n                <div className={st.State_Con}>\n                    Could not connect to lobby, pusher service status is: {ref_pusherState.current}. \n                    Please try again later!\n                </div>\n        }\n\n        /*\n        ######################\n            MATCH STATUS\n        ######################\n        */\n        //ERROR (transferring initial values from setup)\n        if (ref_state.current.status === Status.errorInitalValues) {\n            return content =  \n                <div className={st.State_Con}>\n                    Critial Error: Inital Values could not be transferred from setup.  \n                </div>\n        }\n        //HAS EVERTYONE JOINED?\n        else if (ref_state.current.status === Status.init ||\n            ref_state.current.status === Status.everyoneJoined) {\n            return content =  \n                <div className={st.State_Con}>\n                    <div className={st.State_Caption}>\n                        {ref_state.current.statusMsg}\n                    </div>\n                    <CircularProgress/>\n                </div>\n        }\n\n        return content\n    }\n    \n    //OPERATIONAL MATCH LOGIC\n    const getContent = () => {\n\n        let content = <div></div>\n\n        //IS EVERYONE READY?\n        if (ref_state.current.status === Status.everyoneReady) {\n            return content = \n                <div className={st.Content_Con}>\n                    {!ref_settings_lobby.current.autoContinue && \n                        <div className={st.AutoContinue_Con}>\n                            Autocontinue: Off\n                        </div>\n                    }\n                    {ref_settings_lobby.current.autoContinue && \n                        <div className={st.AutoContinue_Con}>\n                            Autocontinue in 30\n                        </div>\n                    }\n                    <div className={st.Players_Con}>\n                        <Players   \n                            data={ref_players.current}\n                            currentUser={ref_username.current}\n                        />\n                    </div>\n                    {!userIsReady() && \n                        <button className={st.Button_Ready} onClick={() => setYourselfReady()}>\n                            I am Ready\n                        </button>\n                    }\n                </div>\n        }\n        //CALC ROUND\n        else if (ref_state.current.status === Status.calcRound) {\n            return content = \n                <div className={st.Content_Con}>\n                    <div className={st.State_Caption}>\n                        Setting up next round...\n                    </div>\n                    <CircularProgress/>\n                </div>\n        }\n        //START ROUND-COUNTDOWN\n        else if (ref_state.current.status === Status.startRoundcountdown) {\n            return content = \n                <div className={st.Content_Con}>\n                    <div>\n                        Round {ref_state.current.roundIndex + 1} starts in:\n                    </div>\n                    <div>\n                        {ref_state.current.startCountdown}\n                    </div>\n                </div>\n        }\n        //SHOW ROUND \n        else if (ref_state.current.status === Status.showRound) {\n            return content = \n                <div className={st.Tweet_Con}>\n                    {TweetComp.getComponent(ref_tweets.current[ref_state.current.roundIndex], pictureClick)}\n                </div>\n        }\n        //SHOW OWN PICK \n        else if (ref_state.current.status === Status.showRound_OwnPick) {\n            return content = \n                <div className={st.Tweet_Con}>\n                    {TweetComp.getComponent(ref_tweets.current[ref_state.current.roundIndex], pictureClick)}\n                </div>\n        }\n        //SHOW SOLUTION \n        else if (ref_state.current.status === Status.showRound_Solution) {\n            return content = \n                <div className={st.Tweet_Con}>\n                    {TweetComp.getComponent(ref_tweets.current[ref_state.current.roundIndex], pictureClick)}\n                    <button onClick={() => {ref_state.current.roundIndex-=1;forceUpdate()}}>Prev Tweet</button>\n                    <button onClick={() => {ref_state.current.roundIndex+=1;forceUpdate()}}>Next Tweet</button>\n                </div>\n        }\n        \n        return content\n    }\n\n    const getReadyCountdownComp = () => {\n\n        if (ref_state.current.status === Status.showRound_Solution) {\n\n            //CARE ABOUT LAST ROUND\n\n            //show roundtime when user is ready!\n            return  <button className={st.Button_Ready} onClick={() => setYourselfReady()}>\n                        Ready\n                    </button>\n        }\n        else {\n            return  <div className={st.Clock} title=\"Time\">\n                        {ref_state.current.roundCountdown}\n                    </div>\n        }\n    }\n\n    const getNavComp = () => {\n        let props:NavProps = {\n            profiles: ref_profiles.current,\n            onSelectAnswer: onSelectAnswer,\n            roundActive: ref_state.current.roundActive,\n            chatmessages: ref_chat.current,\n            onNewMessage: onNewChatMessage,\n            settings: ref_settings_match.current,\n            onSettingsChanged: onSettingsChanged,\n            onNotfication: showNotification\n        }\n        return React.createElement(Nav, props)\n    }\n\n\treturn (\n\t\t<div className={st.Con}>\n            {Not.getComponent(ref_notification.current)}\n            {getOverlayContent()}\n            <div className={st.Left_Con}>\n                AD CONTAINER\n            </div>\n            <div className={st.Center_Con}>\n                {getContent()}\n            </div>\n            <div className={st.Right_Con}>\n                <div className={st.Info_Con}>\n                    {getReadyCountdownComp()}\n                    <div className={st.Round} title=\"Round\">\n                        {(ref_state.current.roundIndex + 1)+ '/' + ref_settings_lobby.current.rounds}\n                    </div>\n                </div>\n                <div className={st.Nav_Con}>\n                    {getNavComp()}\n                </div>\n            </div>\n            {ref_HoverPic.current !== '' && \n                <div className={st.HoverPic_Con} onClick={() => pictureClick('')}>\n                    <img className={st.HoverPic} src={ref_HoverPic.current} alt=\"\"/>\n                </div>\n            }\n        </div>\n\t)\n}\n\n\n\n","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/Setup.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/lobby/Lobby.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/players/Players.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/lobby/profiles/Profiles.tsx",["175"],"import st from './Profiles.module.scss';\n\n//interfaces\nimport {Profile} from 'components/Interfaces'\nimport {ProfilesUsage} from 'components/Interfaces'\nimport {TwitterStatus} from 'components/Interfaces'\n//components\nimport TwitterProfileList from 'components/00_shared/profiles/TwitterProfileList'\n\nexport default function Profiles(profiles:Profile[],\n                                 onRemoveProfile:(deletedUser: Profile) => void) {\n    \n    const onRemoveClick = (deletedUser: Profile) => {\n        onRemoveProfile(deletedUser)\n    }\n\n    const getContent = () => {\n        if (profiles.length === 0) {\n            return  <div className={st.Empty_Con}>\n                        Add profiles to play from the search or the popular profiles section on the left\n                    </div>\n        }\n        return <TwitterProfileList\n                    parentType={ProfilesUsage.Added}\n                    data={profiles}\n                    onRemoveUser={onRemoveClick}\n                />\n    }\n\n    return (\n        getContent()\n    );\n}\n\n\n","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/add/search/Search.tsx",["176"],"import React, { useState } from 'react';\n//import  { Redirect } from 'react-router-dom'\nimport st from './Search.module.scss'\nimport {log} from 'components/Logic'\n//ui-elements\nimport TwitterProfileList from 'components/00_shared/profiles/TwitterProfileList'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport TwitterIcon from 'assets/footer/Twitter_Icon.png'\nimport TwitterIconBlack from 'assets/user/Twitter_Black.png'\n//logic\nimport {didUserExceedLimit} from 'components/Logic'\n//interfaces\nimport {Profile} from 'components/Interfaces'\nimport {LocalStorage} from 'components/Interfaces'\nimport {TwitterStatus} from 'components/Interfaces'\nimport {ProfilesUsage} from 'components/Interfaces'\n//functional-interfaces\nimport {SearchProps} from 'components/Functional_Interfaces'\n//components\nimport * as Not from 'components/00_shared/notification/Notification'\n\nconst stateInitArray:Profile[] = []\n\n/*\n//status for step 1\nenum TokenStatus {\n    init,\n    requested,\n    error,\n    //no received, since there is a immediate redirect on receive\n}\n\n//status for saved token from localstorage\nenum TokenVerify {\n    init,\n    pending,\n    fail,\n    success\n}\n*/\n\n//search request type\nenum RequestType {\n    inital,\n    more\n}\n\nlet actionTimestamps:string[] = []\n\nexport default function Search(props:SearchProps) {\n    const [page, setPage] = useState(1);\n    const [userObjects, setUserObjects] = useState(stateInitArray);\n    const [searchInput, setSearchInput] = useState(\"\");\n    const [lastSearchString, setLastSearchString] = useState(\"\");\n    const [searchEnabled, setSearchEnabled] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [twitterStatus, setTwitterStatus] = useState(TwitterStatus.none)\n    //const [tokenStatus, setTokenStatus] = useState(TokenStatus.init)\n    //const [tokenVerifyStatus, setTokenVerifyStatus] = useState(TokenVerify.init)\n    //const [redirectURL, setRedirectURL] = useState('')\n\n    \n    /*\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => {\n\n        \n        //CHECK IF USER ALREADY HAS VALID TOKEN IN LOCAL STORAGE\n        //only verify once\n        if (tokenVerifyStatus !== TokenVerify.init) {\n            return\n        }\n        //verify token & secret\n        setTokenVerifyStatus(TokenVerify.pending)\n        let accessToken = localStorage.getItem(LocalStorage.Access_Token)\n        let accessToken_Secret = localStorage.getItem(LocalStorage.Access_Token_Secret)\n        if (accessToken !== null && accessToken_Secret != null) {\n            log('token & secret available -> verify')\n            verifyCredentials(accessToken, accessToken_Secret)\n                .then(() => {\n                    //success -> enable search\n                    setTwitterStatus(TwitterStatus.signedIn)\n                }) \n                .catch(() => {\n                    setTokenVerifyStatus(TokenVerify.fail)\n                });\n        }\n    });\n    */\n    \n\n    /*\n    ##################################\n    ##################################\n                GENERAL\n    ##################################\n    ##################################\n    */\n\n    //send error notification to setup\n    const showErrNot = (msg: string) => {\n        log(msg)\n        props.newNotification('Error: ' + msg, Not.Type.Error)\n    }\n\n    const showWarNot = (msg: string) => {\n        log(msg)\n        props.newNotification('Warning: ' + msg, Not.Type.Warning)\n    }\n\n    //ACTIONS EXCEEDED\n    const actionsExceeded = () => {\n        if (didUserExceedLimit(actionTimestamps, 20, 30000)) {\n            //actions exceeded\n            props.newNotification('easy boy... small cooldown - too many actions', Not.Type.Warning)\n            return true\n        }\n        //not exceeded -> add timestamp\n        actionTimestamps.push(new Date().toISOString())\n        return false\n    }\n\n    /*\n    ##################################\n    ##################################\n            Search Users\n    ##################################\n    ##################################\n    */\n\n\n    const onSearchButtonClick = (type: RequestType) => {\n\n        if (actionsExceeded()) {\n            return\n        }\n\n        //dont fire mutiple requests\n        if (loading) {\n            showWarNot('already loading')\n            return\n        }\n\n        //check if search string is provided\n        if (!searchEnabled && RequestType.inital) {\n            showErrNot('no input string')\n            return\n        }\n\n        //check if user loads more users or searches for new\n        let qString = \"\"\n        let newPage = -1\n        if (type === RequestType.inital) {\n            setPage(1)\n            newPage = 1\n            qString = searchInput\n\n            //reset user objects\n            let _userObjects = userObjects \n            let length = _userObjects.length\n            while (length >= 0) {\n                _userObjects.pop()\n                length--\n            }\n            setUserObjects(_userObjects) \n            \n        }\n        else if (type === RequestType.more) {\n            newPage = page + 1\n            setPage(newPage)\n            qString = lastSearchString\n        }\n\n        if (qString === \"\" || newPage === -1) {\n            showErrNot('not all query parameters given')\n            return\n        }\n\n        //start request\n        setLoading(true)\n        getUsers(qString, newPage)\n            .then(res => {\n                if (res.status !== 200) {\n                    //error\n                    showErrNot(res.message)\n                    if (res.status === 44) {\n                        //-> no more users to show\n                        showWarNot('no more users available')\n                    }\n                }\n                else {\n                    //success\n                    log('successfully got data for \"' + qString + '\" at page ' + newPage)\n\n                    //if user clicks on more but deleted search string already\n                    if (searchInput.length === 0) {\n                        setLastSearchString(lastSearchString)\n                    }\n                    else {\n                        setLastSearchString(searchInput)\n                    }\n\n                    //append new user objects to current\n                    let _userObjects = userObjects\n                    let concat = _userObjects.concat(res.data)\n                    setUserObjects(concat) \n                }\n                setLoading(false)\n            }) \n            .catch(err => {\n                showErrNot('critical system error occured, check console')\n                log(err)\n                setLoading(false)\n            });\n    }\n\n\n    const getUsers = async (name: string, page: number) => {\n\n        let accessToken = localStorage.getItem(LocalStorage.Access_Token)\n        let accessToken_Secret = localStorage.getItem(LocalStorage.Access_Token_Secret)\n        if (accessToken === null) {\n            accessToken = \"\"\n        }\n        if (accessToken_Secret === null) {\n            accessToken_Secret = \"\"\n        }\n\n        //passing additional parameters in header\n        var requestOptions = {\n            headers: {\n                'q': name,\n                'page': page.toString(),\n                'token': accessToken,\n                'token_secret': accessToken_Secret\n            }\n        };\n        let request = new Request('/api/twitter/users', requestOptions)\n\n        const response = await fetch(request)\n        const body = await response.json()\n        if (response.status !== 200) throw Error(body.message)\n        \n        return body;\n    };\n\n    /*\n    ##################################\n    ##################################\n            Twitter Sign in\n    ##################################\n    ##################################\n    */\n\n    /*\n    const onSignInButtonClicked = async () => {\n\n        //alredy requested\n        if (tokenStatus === TokenStatus.requested) {\n            return\n        }\n\n        log('trying to sign in')\n        setTokenStatus(TokenStatus.requested)\n\n        //userAuth\n        let request = new Request('/api/twitter/request_token')\n        const response = await fetch(request)\n        const body = await response.json()\n        if (body.status !== 200) {\n            showErrNot(body.message) //maybe not body.message \n            setTokenStatus(TokenStatus.error)\n        }\n        else {\n            log(body)\n            //\"oauth_token=i-7ofAAAAAABLx8pAAABd86SI80&\n            //oauth_token_secret=IvoJA3G2XzQ41c9IlfgZb8HHQY8Vw6Rq&oauth_callback_confirmed=true\"\n            let str: string = body.body\n\n            //extract token\n            let search = '='\n            let start = str.indexOf(search) + search.length;\n            let end = str.indexOf('&');\n            let token = str.substring(start, end)\n\n            //extract token_secret\n            search = 'secret='\n            start = str.indexOf(search) + search.length;\n            end = str.lastIndexOf('&');\n            let tokenSecret = str.substring(start, end)\n\n            //extract matchID\n            let current = window.location.href\n            let matchID = current.substr(current.lastIndexOf('/') + 1)\n\n            //reset old access token + secret retrieved in step 3\n            localStorage.removeItem(LocalStorage.Access_Token)\n            localStorage.removeItem(LocalStorage.Access_Token_Secret)\n\n            //save tokens for current step 1\n            localStorage.setItem(LocalStorage.Token, token)\n            localStorage.setItem(LocalStorage.Token_Secret, tokenSecret)\n            localStorage.setItem(LocalStorage.MatchID, matchID)\n\n            //redirect user to: /redirect/:token\n            setRedirectURL('/redirect/' + token)\n            setTwitterStatus(TwitterStatus.tokenReceived)\n            \n        }\n    }\n\n    const verifyCredentials = async (accessToken: string, accessToken_Secret: string) => {\n        //passing additional parameters in header\n        var requestOptions = {\n            headers: {\n                'token': accessToken,\n                'token_secret': accessToken_Secret\n            }\n        };\n        let request = new Request('/api/twitter/verify_token', requestOptions)\n\n        const response = await fetch(request)\n        const body = await response.json()\n        if (body.status !== 200) {\n            showErrNot(body.message) \n            setTokenVerifyStatus(TokenVerify.fail)\n            throw new Error(body)\n        }\n        else {\n            log('valid token & secret')\n            setTokenVerifyStatus(TokenVerify.success)\n            return \"200\";\n        }\n    };\n    */\n\n\n\n    /*\n    ##################################\n    ##################################\n            Handlers\n    ##################################\n    ##################################\n    */\n    const userNameChanged = (name: string) => {\n        setSearchInput(name)\n\n        //check empty or only spaces\n        if (name.length === 0 || !name.trim()) {\n            setSearchEnabled(false)\n        }\n        else {\n            setSearchEnabled(true)\n        }\n    }\n\n    const keyPressed = (event: any) => {\n        if (event.key === 'Enter' && searchInput !== \"\") {\n            onSearchButtonClick(RequestType.inital)\n        }\n    }\n\n\n    /*\n    ##################################\n    ##################################\n            CONTENT\n    ##################################\n    ##################################\n    */\n    const getLoginComponent = () => {\n        /*\n            conditions like 'joinType' have to be passed to the Search component in order to avoid\n            errors in parent component like:\n            -> \"React has detected a change in the order of Hooks\"\n            -> \"Uncaught Invariant Violation: Rendered more hooks than during the previous render\"\n            https://reactjs.org/docs/hooks-rules.html\n        */\n        let rtn = <div></div>\n\n        return rtn\n\n        /*\n        if (twitterStatus === TwitterStatus.none) {\n            //NOT SIGNED IN\n            rtn = \n            <div className={st.Login_Con}>\n                <div className={st.Button_Con} title=\"Sign into your twitter to play your followed profiles\">\n                    <img className={st.Icon} \n                        src={TwitterIcon} \n                        alt=\"Sign into Twitter\" \n                        onClick={() => onSignInButtonClicked()}/>\n                    <button className={st.Search} \n                            onClick={() => onSignInButtonClicked()}>\n                                Sign in\n                    </button>\n                </div>\n                <div className={st.TokenStatus_Con}>\n                    {(tokenStatus === TokenStatus.error) &&\n                        <div>\n                            There was an error receiving the token.\n                        </div>\n                    }\n                    {(tokenStatus === TokenStatus.requested) &&\n                        <CircularProgress/>\n                    }\n                    {(tokenVerifyStatus === TokenVerify.fail) &&\n                        <div>\n                            Previously used user-credentials could not be verified, please sign in again.\n                        </div>\n                    }\n                </div>\n            </div>\n        }\n        else if (twitterStatus === TwitterStatus.tokenReceived) {\n            //FIRST TOKEN RECEIVED\n            rtn = \n                <Redirect to={redirectURL}/>\n        }\n        else if (twitterStatus === TwitterStatus.signedIn) {\n            //SIGNED IN\n            rtn = \n            <div className={st.Login_Con}>\n                You are signed in with your twitter user!\n            </div>\n        }\n        return rtn\n        */\n    }\n\n    return (\n        <div className={st.Con}>\n            {getLoginComponent()}\n            <div className={st.Search_Con}>\n                <div className={st.Top_Con}>\n                    <input  className={st.Input} \n                            type=\"search\" \n                            autoComplete=\"off\" \n                            placeholder=\"Search for Twitter username...\"\n                            onChange={(e) => userNameChanged(e.target.value)} \n                            onKeyPress={(e) => keyPressed(e)}/>\n                    {searchEnabled && \n                        <div className={st.Button_Con}>\n                            <img className={st.Icon} \n                                src={TwitterIcon} \n                                alt=\"Twitter\" \n                                onClick={(e) => onSearchButtonClick(RequestType.inital)}/>\n                            <button className={st.Search} \n                                    onClick={(e) => onSearchButtonClick(RequestType.inital)}>\n                                        Search\n                            </button>\n                        </div>\n                    }\n                </div>\n                {userObjects.length === 0 &&\n                    <div className={st.Empty_Con}>\n                        <div className={st.Empty_Caption}>\n                            Search for public Twitter profiles and add them by clicking the card.\n                        </div>\n                        <img className={st.Empty_Icon} \n                            src={TwitterIconBlack} \n                            alt=\"Twitter\"\n                        />\n                    </div>\n                }\n                {userObjects.length !== 0  && \n                    <div className={st.List_Con}>\n                        <TwitterProfileList\n                            parentType={ProfilesUsage.Search}\n                            data={userObjects}\n                            addedUsers={props.profiles}\n                            onAddUser={props.addProfile}\n                            onRemoveUser={() => {}}\n                            twitterStatus = {twitterStatus}\n                        />\n                        {(userObjects.length % 20 === 0) && \n                            <div className={st.More_Con}>\n                                <button className={st.More} \n                                        onClick={(e) => onSearchButtonClick(RequestType.more)}>\n                                    Show more...\n                                </button>\n                                {loading && //\"more\" loading\n                                    <div className={st.Loading_Con}>\n                                        <CircularProgress/>\n                                    </div>\n                                }\n                            </div>\n                        }\n                    </div>\n                }\n                {loading && userObjects.length === 0 && //\"inital\" loading\n                <div className={st.Loading_Con}>\n                    <CircularProgress/>\n                </div>\n                }\n            </div>\n        </div>\n    );\n}\n\n\n\n/*\n\n\n\n\n\n\n*/\n","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/0_root/Footer.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/tweet/Tweet.tsx",["177"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/TwitterCallback.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/add/Add.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/nav/pages/Nav_Ranking.tsx",[],["178","179"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/0_root/Header.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/Countdown.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/nav/Nav.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/nav/pages/Ranking.tsx",["180","181"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/chat/Chat.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/settings/Settings.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/notification/Notification.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/interaction/Interaction.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/profiles/TwitterProfileList.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/add/popular/PopularProfiles.tsx",["182"],"import st from './PopularProfiles.module.scss';\n\n//interfaces\nimport {ProfilesUsage} from 'components/Interfaces'\nimport {TwitterStatus} from 'components/Interfaces'\n//functional-interfaces\nimport {PopularProfilesProps} from 'components/Functional_Interfaces'\n//components\nimport TwitterProfileList from 'components/00_shared/profiles/TwitterProfileList'\n\nexport default function PopularProfiles(props:PopularProfilesProps) {\n\n    return (\n        <div className={st.Con}>\n            <TwitterProfileList\n                parentType={ProfilesUsage.Search}\n                data={props.popularProfiles}\n                onAddUser={props.addProfile}\n            />\n        </div>\n    )\n}\n\n\n",{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"183","replacedBy":"187"},{"ruleId":"185","replacedBy":"188"},{"ruleId":"183","replacedBy":"189"},{"ruleId":"185","replacedBy":"190"},{"ruleId":"183","replacedBy":"191"},{"ruleId":"185","replacedBy":"192"},{"ruleId":"183","replacedBy":"193"},{"ruleId":"185","replacedBy":"194"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"195","severity":1,"message":"196","line":23,"column":8,"nodeType":"197","messageId":"198","endLine":23,"endColumn":17},{"ruleId":"195","severity":1,"message":"199","line":6,"column":9,"nodeType":"197","messageId":"198","endLine":6,"endColumn":22},{"ruleId":"195","severity":1,"message":"200","line":57,"column":27,"nodeType":"197","messageId":"198","endLine":57,"endColumn":43},{"ruleId":"195","severity":1,"message":"201","line":3,"column":9,"nodeType":"197","messageId":"198","endLine":3,"endColumn":12},{"ruleId":"183","replacedBy":"202"},{"ruleId":"185","replacedBy":"203"},{"ruleId":"195","severity":1,"message":"204","line":1,"column":17,"nodeType":"197","messageId":"198","endLine":1,"endColumn":25},{"ruleId":"195","severity":1,"message":"201","line":3,"column":9,"nodeType":"197","messageId":"198","endLine":3,"endColumn":12},{"ruleId":"195","severity":1,"message":"199","line":5,"column":9,"nodeType":"197","messageId":"198","endLine":5,"endColumn":22},"no-native-reassign",["205"],"no-negated-in-lhs",["206"],["205"],["206"],["205"],["206"],["205"],["206"],["205"],["206"],"@typescript-eslint/no-unused-vars","'Countdown' is defined but never used.","Identifier","unusedVar","'TwitterStatus' is defined but never used.","'setTwitterStatus' is assigned a value but never used.","'log' is defined but never used.",["205"],["206"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]