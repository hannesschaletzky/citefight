[{"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/reportWebVitals.js":"1","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/index.tsx":"2","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/App.tsx":"3","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/root/Header.tsx":"4","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/menu/Menu.jsx":"5","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/Match.tsx":"6","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Legal.tsx":"7","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/root/Footer.tsx":"8","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/errorpages/NotFound.tsx":"9","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/Tweet.tsx":"10","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Donate.tsx":"11","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Landing.tsx":"12","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/Mockup.tsx":"13","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/About.tsx":"14","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/Setup.tsx":"15","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Mockdata.ts":"16","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/search/Search.tsx":"17","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/search/SearchList.tsx":"18","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/pages/Nav_Ranking.tsx":"19","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/Nav.tsx":"20","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/Images.tsx":"21","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/BottomPart.tsx":"22","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/pages/Nav_Answers.tsx":"23","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/players/Players.tsx":"24","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/chat/Chat.tsx":"25","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/TopPart.tsx":"26","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Interfaces.tsx":"27","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Credits.tsx":"28","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/Extensions.js":"29"},{"size":362,"mtime":1612013307768,"results":"30","hashOfConfig":"31"},{"size":500,"mtime":1612016004776,"results":"32","hashOfConfig":"31"},{"size":1990,"mtime":1613091384176,"results":"33","hashOfConfig":"31"},{"size":619,"mtime":1612214882618,"results":"34","hashOfConfig":"31"},{"size":3059,"mtime":1611754162164,"results":"35","hashOfConfig":"31"},{"size":271,"mtime":1612823122249,"results":"36","hashOfConfig":"31"},{"size":401,"mtime":1611867431112,"results":"37","hashOfConfig":"31"},{"size":2213,"mtime":1613086149703,"results":"38","hashOfConfig":"31"},{"size":500,"mtime":1612823136652,"results":"39","hashOfConfig":"31"},{"size":1106,"mtime":1612802141414,"results":"40","hashOfConfig":"31"},{"size":322,"mtime":1612820947127,"results":"41","hashOfConfig":"31"},{"size":1249,"mtime":1612214819003,"results":"42","hashOfConfig":"31"},{"size":1619,"mtime":1612814853355,"results":"43","hashOfConfig":"31"},{"size":318,"mtime":1612820938975,"results":"44","hashOfConfig":"31"},{"size":20263,"mtime":1613341671046,"results":"45","hashOfConfig":"31"},{"size":6640,"mtime":1612814849900,"results":"46","hashOfConfig":"31"},{"size":5522,"mtime":1613075679259,"results":"47","hashOfConfig":"31"},{"size":5229,"mtime":1613146066104,"results":"48","hashOfConfig":"31"},{"size":6749,"mtime":1612814305974,"results":"49","hashOfConfig":"31"},{"size":3540,"mtime":1612802119719,"results":"50","hashOfConfig":"31"},{"size":4765,"mtime":1612216103823,"results":"51","hashOfConfig":"31"},{"size":1532,"mtime":1612216278448,"results":"52","hashOfConfig":"31"},{"size":3050,"mtime":1612814163876,"results":"53","hashOfConfig":"31"},{"size":622,"mtime":1613087379760,"results":"54","hashOfConfig":"31"},{"size":4513,"mtime":1613132973457,"results":"55","hashOfConfig":"31"},{"size":1695,"mtime":1612216286818,"results":"56","hashOfConfig":"31"},{"size":1744,"mtime":1613153099021,"results":"57","hashOfConfig":"31"},{"size":618,"mtime":1612820967289,"results":"58","hashOfConfig":"31"},{"size":2319,"mtime":1613140824619,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1xhk8fg",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/reportWebVitals.js",[],["129","130"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/index.tsx",[],["131","132"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/App.tsx",[],["133","134"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/root/Header.tsx",[],["135","136"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/menu/Menu.jsx",[],["137","138"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/Match.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Legal.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/root/Footer.tsx",[],["139","140"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/errorpages/NotFound.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/Tweet.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Donate.tsx",[],["141","142"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Landing.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/Mockup.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/About.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/Setup.tsx",["143"],"/* eslint-disable react/jsx-pascal-case */\nimport { useState, useEffect, useRef, useReducer } from 'react';\nimport st from './Setup.module.scss'\n//import { useParams } from 'react-router-dom';\n\nimport {Setup_Event} from 'components/Interfaces'\nimport {Setup_Player} from 'components/Interfaces'\nimport {Setup_ChatMsg} from 'components/Interfaces'\nimport {Twitter_User} from 'components/Interfaces'\nimport {SysMsg} from 'components/Interfaces'\nimport {SetupEventType} from 'components/Interfaces'\nimport {AdminType} from 'components/Interfaces'\n\nimport Search from './search/Search'\nimport Players from './players/Players'\nimport Chat from './chat/Chat'\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nconst Pusher = require('pusher-js');\n\nenum PusherConState {\n    initialized = 'initialized',\n    connecting = 'connecting',\n    connected = 'connected',\n    unavailable = 'unavailable',\n    failed = 'failed',\n    disconnected = 'disconnected',\n}\n\nconst twitterUserInit:Twitter_User[] = []\nconst playersInit:Setup_Player[] = []\nconst chatInit:Setup_ChatMsg[] = []\n\nlet pusherClient:any = null\nlet pusherChannel:any = null\nlet userName = \"\"\n\nexport default function Setup() {\n    //states\n    const ref_twitterUsers = useRef(twitterUserInit);\n    const ref_players = useRef(playersInit);\n    const ref_chat = useRef(chatInit);\n    const [,forceUpdate] = useReducer(x => x + 1, 0);\n\n    //RIGHT PANEL\n    //const [userName, setUserName] = useState(\"\");\n    const [joinEnabled, setJoinEnabled] = useState(false);\n    const [joined, setJoined] = useState(false);\n    const [loading, setLoading] = useState(false)\n    const [pusherConState, setPusherConState] = useState(PusherConState.initialized)\n    \n    const channelName = 'Game1'\n\n    //params hook\n    //const { id } = useParams<Record<string, string | undefined>>()\n\n    /*\n    ##################################\n    ##################################\n        DETECT TAB CLOSING\n    ##################################\n    ##################################\n    */\n\n    useEffect(() => {\n        window.addEventListener('beforeunload', alertUser)\n        window.addEventListener('unload', handleTabClosing)\n        return () => {\n            window.removeEventListener('beforeunload', alertUser)\n            window.removeEventListener('unload', handleTabClosing)\n        }\n    })\n\n    const handleTabClosing = () => {\n        if (pusherClient !== null) {\n            setTimeout(function(){}, 1000);\n            pusherClient.disconnect()\n        }\n    }\n\n    const alertUser = (event:any) => {\n        setTimeout(function(){}, 1000);\n            pusherClient.disconnect()\n        //event.preventDefault()\n        //event.returnValue = ''\n    }\n\n    /*\n    ##################################\n    ##################################\n        GENERAL FUNCTIONS\n    ##################################\n    ##################################\n    */\n    const createPlayerObject = (name: string) => {\n        let newPlayer:Setup_Player = {\n            name: name\n        }\n        return newPlayer\n    }\n\n    const addSysMsg = (type:SysMsg, userName:string) => {\n\n        //create msg\n        let msg:Setup_ChatMsg = {\n            name: '',\n            msg: '',\n            type: type\n        }\n\n        //determine type \n        if (type === SysMsg.userJoined) {\n            msg.msg = userName + ' joined'\n        }\n        else if (type === SysMsg.userLeft) {\n            msg.msg = userName + ' left'\n        }\n\n        //add\n        ref_chat.current.push(msg)\n    }\n\n\n\n    /*\n    ##################################\n    ##################################\n            JOIN && LEAVE \n    ##################################\n    ##################################\n    */\n    const joinGame = () => {\n\n        //check if enabled\n        if (!joinEnabled) {\n            return\n        }\n\n        //check if user already joined\n        if (pusherClient !== null) {\n            console.log('already joined')\n            return\n        }\n\n        if (loading) {\n            console.log('already trying to join')\n            return\n        } \n\n        setLoading(true)\n\n        //init pusher client\n        let appKey = process.env.REACT_APP_PUSHER_KEY\n        let cluster = process.env.REACT_APP_PUSHER_CLUSTER\n        let _pusherClient = new Pusher(appKey, {\n          cluster: cluster,\n          encrypted: true,\n          //authEndpoint: '/api/pusher/auth'\n        })\n\n        //bind to all events\n        //see: https://pusher.com/docs/channels/using_channels/connection#available-states\n        _pusherClient.connection.bind('state_change', (states:any) => {\n            //states = {previous: 'oldState', current: 'newState'}\n            console.log('new con state: ' + states.current)\n            setPusherConState(states.current) //-> also see enum PusherConState\n        });\n\n        //bind error event\n        _pusherClient.connection.bind('error', (err:any) => {\n            setJoined(false)\n            setLoading(false)\n            let str = JSON.stringify(err, null, 4);\n            console.log('error during pusher connection')\n            console.log(str)\n        })\n\n        //bind connected\n        _pusherClient.connection.bind('connected', async () => {\n            console.log('pusher is connected')\n\n            //sub channel\n            const channel = _pusherClient.subscribe(channelName)\n            // -> success\n            channel.bind('pusher:subscription_succeeded', () => {\n                console.log('subscribed to channel: ' + channelName)\n                \n                //set vars\n                pusherClient = _pusherClient \n                pusherChannel = channel\n                setJoined(true)\n                setLoading(false)\n\n                //bind to all events\n                channel.bind(SetupEventType.Admin, \n                    (data:any) => handleEvent_Admin(data)\n                )\n                channel.bind(SetupEventType.Player, \n                    (data:any) => handleEvent_Player(data)\n                )\n                channel.bind(SetupEventType.Chat, \n                    (data:any) => handleEvent_Chat(data)\n                )\n\n                //request current state from lobby\n                fireEvent_Admin(AdminType.join)\n            });\n\n            // -> error\n            channel.bind('pusher:subscription_error', (err:any) => {\n                let str = JSON.stringify(err, null, 4);\n                console.log('error during subscribing to channel: ' + channelName)\n                console.log(str)\n            });\n        })\n    }\n\n\n    const leaveGame = () => {\n\n        //check if connected\n        if (pusherClient === null) {\n            console.log('no client to disconnect')\n            return\n        }\n        if (pusherChannel === null) {\n            console.log('no channel to disconnect')\n            return\n        }\n\n        //unbind channels & disconnect\n        pusherChannel.unbind()\n        pusherClient.disconnect()\n        pusherChannel = null\n        pusherClient = null \n\n        //reset refs\n        ref_twitterUsers.current = []\n        ref_chat.current = []\n        ref_players.current = []\n\n        //reset vars\n        setJoinEnabled(false)\n        setJoined(false)\n        setLoading(false)\n\n        //fire event to admin \n        fireEvent_Admin(AdminType.leave)\n        \n        console.log('successfully disconnected')\n    }\n\n    /*\n    ##################################\n    ##################################\n        EVENT: Admin\n    ##################################\n    ##################################\n    */\n    const handleEvent_Admin = (event:any) => {\n\n        /*\n            ONLY FIRST AND SECOND PERSON IN PLAYERS LIST ARE ADMIN AND HANDLE EVENTS\n        */\n\n        /*\n        let str = JSON.stringify(event.data, null, 4);\n        console.log(str)\n        */\n\n        //security\n        if (event.type !== SetupEventType.Admin) {\n            console.log('EventType mismatch in handleEvent_Admin:\\n\\n' + event)\n            return\n        }\n        let triggerUser = event.data\n\n        //JOIN\n        if (event.adminType === AdminType.join) {\n            \n            //encapsulated join\n            const joinPlayer = (name:string) => {\n                let newUser = createPlayerObject(name)\n                ref_players.current.push(newUser)\n                addSysMsg(SysMsg.userJoined, name)\n            }\n\n            if (ref_players.current.length === 0 && triggerUser === userName) {\n                /*\n                    you are the only one in the game\n                    -> dont send out event, add youself manually\n                */\n                console.log('you are the only person in the room')\n                joinPlayer(triggerUser)\n                forceUpdate()\n                return\n            }\n\n            if (ref_players.current[0].name === userName) {\n                /*\n                    you are first admin, so you handle\n                    -> attach new user \n                    -> broadcast current state\n                */\n                console.log('BROADCAST join for: ' + triggerUser)\n                joinPlayer(triggerUser)\n                fireEvent_Chat()\n                fireEvent_Player()\n            }\n        }\n\n        //LEAVE\n        else if (event.adminType === AdminType.leave) {\n\n            //first admin\n            if (ref_players.current[0].name === userName) {\n                if (triggerUser === userName) {\n                    /*\n                        not let first admin handle if he leaves the game\n                        -> let second admin handle\n                    */\n                    return\n                }\n            }\n            //second admin\n            if (ref_players.current[1].name === userName)  {\n                if (triggerUser !== ref_players.current[0].name) {\n                    /*\n                        only handle the request if the first player (first admin) wants to leave\n                    */\n                   return\n                }\n            }\n\n            //remove user\n            for (let i=0; ref_players.current.length;i++) {\n                let user = ref_players.current[i]\n                if (user.name === triggerUser) {\n                    ref_players.current.splice(i,1);\n                    break\n                }\n            }\n            //insert message\n            addSysMsg(SysMsg.userLeft, triggerUser)\n            //broadcast state\n            console.log('BROADCAST leave for: ' + triggerUser)\n            fireEvent_Chat()\n            fireEvent_Player()\n        }\n        \n    }\n\n    const fireEvent_Admin = async (adminType: AdminType) => {\n\n        if (adminType===AdminType.join) {\n            console.log('Joining... \\nasking for current state')\n        }\n\n        //prepare\n        let event:Setup_Event = {\n            type: SetupEventType.Admin,\n            adminType: adminType,\n            data: userName\n        }\n\n        //exectue\n        const response = await fetch('/api/pusher/setup/trigger', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'pusherchannel': channelName,\n                'pusherevent': SetupEventType.Admin\n            },\n            body: JSON.stringify(event), \n        });\n\n        //read response\n        const body = await response.text();\n        console.log(body)\n    }\n\n    /*\n    ##################################\n    ##################################\n        EVENT: Chat\n    ##################################\n    ##################################\n    */\n    const handleEvent_Chat = (event:any) => {\n\n        //security\n        if (event.type !== SetupEventType.Chat) {\n            console.log('EventType mismatch in handleEvent_Chat:\\n\\n' + event)\n            return\n        }\n\n        //set new state\n        let newChat:Setup_ChatMsg[] = event.data\n        console.log(newChat.length + ' msgs retr.')\n        ref_chat.current = newChat\n        forceUpdate()\n        \n    }\n\n    const fireEvent_Chat = async () => {\n\n        console.log('broadcast new chat')\n        //prepare\n        let event:Setup_Event = {\n            type: SetupEventType.Chat,\n            adminType: AdminType.none,\n            data: ref_chat.current\n        }\n\n        //CHECK SIZE\n        //@@@TODO\n\n        //execute\n        const response = await fetch('/api/pusher/setup/trigger', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'pusherchannel': channelName,\n                'pusherevent': SetupEventType.Chat\n            },\n            body: JSON.stringify(event),\n        });\n\n        //read response\n        const body = await response.text();\n        console.log(body)\n    }\n\n\n\n    /*\n    ##################################\n    ##################################\n        EVENT: Player\n    ##################################\n    ##################################\n    */\n    const handleEvent_Player = (event:any) => {\n\n        //security\n        if (event.type !== SetupEventType.Player) {\n            console.log('EventType mismatch in handleEvent_Player:\\n\\n' + event)\n            return\n        }\n\n        //set new state\n        let newPlayers:Setup_Player[] = event.data\n        console.log(newPlayers.length + ' total players')\n        ref_players.current = newPlayers\n        forceUpdate()\n\n        /*\n            Only first and second player handle admin events\n            unbind all \n            and then only bind first and second player\n        */\n        pusherChannel.unbind(SetupEventType.Admin);\n        if (ref_players.current[0].name === userName ||\n            ref_players.current[1].name === userName) {\n            //bind\n            pusherChannel.bind(SetupEventType.Admin, \n                (data:any) => handleEvent_Admin(data)\n            )\n            console.log('Bound admin events')\n        }\n    }\n\n    const fireEvent_Player = async () => {\n\n        console.log('broadcast new players')\n        //prepare\n        let event:Setup_Event = {\n            type: SetupEventType.Player,\n            adminType: AdminType.none,\n            data: ref_players.current\n        }\n\n        //execute\n        const response = await fetch('/api/pusher/setup/trigger', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'pusherchannel': channelName,\n                'pusherevent': SetupEventType.Player\n            },\n            body: JSON.stringify(event),\n        });\n        \n        //read response\n        const body = await response.text();\n        console.log(body)\n\n    }\n\n    /*\n    ##################################\n    ##################################\n        Functions to child components\n    ##################################\n    ##################################\n    */\n\n    //passed to search component\n    const onNewTwitterUserAdded = (newUser: Twitter_User):void => {\n        console.log('new twitter user added: ' + newUser.screen_name)\n        ref_twitterUsers.current.push(newUser)\n        //@@TODO FIRE EVENT\n    }\n\n    //passed to chat \n    const onNewChatMessage = (newMsg:Setup_ChatMsg) => {\n        console.log('new chat msg received: ' + newMsg.msg)\n        newMsg.name = userName //chat component does not know/set user name\n        ref_chat.current.push(newMsg)\n        fireEvent_Chat()\n    }\n\n    /*\n    ##################################\n    ##################################\n            Handlers\n    ##################################\n    ##################################\n    */\n    const userNameChanged = (name: string) => {\n        //setUserName(name)\n        userName = name\n\n        //check empty or only spaces\n        if (name.length === 0 || !name.trim()) {\n            setJoinEnabled(false)\n        }\n        else {\n            setJoinEnabled(true)\n        }\n    }\n\n    const keyPressed = (event: any) => {\n        if (event.key === 'Enter' && userName !== \"\") {\n            joinGame()\n        }\n    }\n\n  return (\n    <div className={st.Content_Con}>\n        <div className={st.Left_Panel}>\n            {Search(onNewTwitterUserAdded, ref_twitterUsers.current)}\n        </div>\n        {joined && \n            <div className={st.Center_Panel}>\n                {ref_twitterUsers.current.length}\n            </div>\n        }\n        <div className={st.Right_Panel}>\n            <div className={st.Interaction_Con}>\n                {!joined &&\n                    <input  className={st.Input}\n                            type=\"search\" \n                            autoComplete=\"off\" \n                            placeholder=\"Enter a name\"\n                            onChange={e => userNameChanged(e.target.value)} \n                            onKeyUp={e => keyPressed(e)}/>\n                }\n                {joinEnabled && !joined &&\n                    <button className={st.Button_Join} onClick={() => joinGame()}>\n                        Join\n                    </button>\n                }\n                {joined && \n                    <button className={st.Button_Leave} onClick={() => leaveGame()}>\n                        Leave\n                    </button>\n                }\n                {loading && \n                    <CircularProgress/>\n                }\n            </div>\n            <div className={st.Players_Con}>\n                {Players(ref_players.current)}\n            </div>\n            {joined && \n                <div className={st.Chat_Con}>\n                    <Chat   data={ref_chat.current}\n                            onNewMsg={onNewChatMessage}\n                    />\n                </div>\n            }\n        </div>\n    </div>\n  );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n//{pusherConState}\n\n\n/*\n    //check if already subscribed\n    let _channel = pusherClient.channel(channelName)\n    if (_channel !== undefined) {\n        if (_channel.subscribed) {\n            return\n        }\n    }\n*/\n\n\n/*\n\n\n\n\n    //synchronous compressing\n        let state:any = null\n        await compressBody(ref_setupState.current)\n            .then((res) => {\n                state = res\n                console.log('success compressing')\n            })\n            .catch((err) => {\n                console.log('Error compressing\\n-> return')\n                return\n            })\n\n\n\n    import {compress} from 'Extensions'\nimport {decompress} from 'Extensions'\n\n    const compressBody = (body:any) => {\n\n        var a = 'a very very long string to be squashed';\n\t    var b = compress(a, false); // 'a veryāăąlong striċ to bečquashed'\n        console.log(b)\n\n        let c = decompress(b)\n        console.log(c)\n\n        console.log(Buffer.from(a).byteLength)\n        console.log(Buffer.from(b).byteLength)\n\n        var zlib = require('zlib');\n\n        //convert data to string and create init buffer\n        let str = JSON.stringify(body) \n        var initBuffer:Buffer = Buffer.from(str)\n        console.log(\"Init Buffer: \" + initBuffer.byteLength);\n\n        return new Promise( function( resolve, reject ) {\n            zlib.deflate(initBuffer, function(err:any, buf:Buffer) {\n                if(err){\n                    console.log(\"Error Zipping\\n\" + err);\n                    reject(err);\n                }\n                console.log(\"Zipped to: \" + buf.byteLength);\n                resolve(buf);\n\n                \n                zlib.inflate(buf, function(err:any, buf:any) {\n                        console.log(\"in the inflate callback:\", buf);\n                        console.log(\"to string:\", buf.toString(\"utf8\") );\n                });\n                \n            });\n        });\n    }\n\n\n\n*/\n\n\n\n/*\n            //GET AUTH TOKEN FOR USER\n            let socketId = _pusherClient.connection.socket_id;\n            const response = await fetch('/api/pusher/auth', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'pusherchannel': channelName,\n                    'socketid': socketId\n                },\n                body: '', \n            });\n            const body = await response.text();\n            //parse to object\n            let obj = JSON.parse(body);\n            let auth = obj.auth\n            console.log('auth: ' + auth)\n            */\n\n\n\n\n","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Mockdata.ts",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/search/Search.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/search/SearchList.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/pages/Nav_Ranking.tsx",[],["144","145"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/Nav.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/Images.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/BottomPart.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/pages/Nav_Answers.tsx",[],["146","147"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/players/Players.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/chat/Chat.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/TopPart.tsx",[],["148","149"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Interfaces.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Credits.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/Extensions.js",[],{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"150","replacedBy":"154"},{"ruleId":"152","replacedBy":"155"},{"ruleId":"150","replacedBy":"156"},{"ruleId":"152","replacedBy":"157"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"150","replacedBy":"154"},{"ruleId":"152","replacedBy":"155"},{"ruleId":"150","replacedBy":"158"},{"ruleId":"152","replacedBy":"159"},{"ruleId":"150","replacedBy":"160"},{"ruleId":"152","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":52,"column":12,"nodeType":"164","messageId":"165","endLine":52,"endColumn":26},{"ruleId":"150","replacedBy":"166"},{"ruleId":"152","replacedBy":"167"},{"ruleId":"150","replacedBy":"168"},{"ruleId":"152","replacedBy":"169"},{"ruleId":"150","replacedBy":"170"},{"ruleId":"152","replacedBy":"171"},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],["172"],["173"],["172"],["173"],["172"],["173"],["172"],["173"],"@typescript-eslint/no-unused-vars","'pusherConState' is assigned a value but never used.","Identifier","unusedVar",["172"],["173"],["172"],["173"],["172"],["173"],"no-global-assign","no-unsafe-negation"]