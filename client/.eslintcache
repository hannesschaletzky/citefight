[{"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/reportWebVitals.js":"1","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/index.tsx":"2","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/App.tsx":"3","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Legal.tsx":"4","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/errorpages/NotFound.tsx":"5","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Donate.tsx":"6","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Landing.tsx":"7","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/About.tsx":"8","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Mockdata.ts":"9","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Interfaces.tsx":"10","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Credits.tsx":"11","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/Extensions.js":"12","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Logic.tsx":"13","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/TwitterRedirect.tsx":"14","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pusher/Pusher.tsx":"15","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/1_join/Join.tsx":"16","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/Match.tsx":"17","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/Setup.tsx":"18","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/lobby/Lobby.tsx":"19","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/players/Players.tsx":"20","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/lobby/profiles/Profiles.tsx":"21","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/add/search/Search.tsx":"22","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/0_root/Footer.tsx":"23","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/tweet/Tweet.tsx":"24","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/TwitterCallback.tsx":"25","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/add/Add.tsx":"26","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/0_root/Header.tsx":"27","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/Countdown.tsx":"28","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/nav/Nav.tsx":"29","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/nav/pages/Ranking.tsx":"30","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/chat/Chat.tsx":"31","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/settings/Settings.tsx":"32","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/notification/Notification.tsx":"33","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/interaction/Interaction.tsx":"34","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/profiles/TwitterProfileList.tsx":"35","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/add/popular/PopularProfiles.tsx":"36","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/nav/pages/Sorting.tsx":"37"},{"size":362,"mtime":1612013307768,"results":"38","hashOfConfig":"39"},{"size":500,"mtime":1612016004776,"results":"40","hashOfConfig":"39"},{"size":4111,"mtime":1615972466665,"results":"41","hashOfConfig":"39"},{"size":401,"mtime":1611867431112,"results":"42","hashOfConfig":"39"},{"size":500,"mtime":1612823136652,"results":"43","hashOfConfig":"39"},{"size":322,"mtime":1612820947127,"results":"44","hashOfConfig":"39"},{"size":1268,"mtime":1614952082500,"results":"45","hashOfConfig":"39"},{"size":318,"mtime":1612820938975,"results":"46","hashOfConfig":"39"},{"size":4783,"mtime":1615972421337,"results":"47","hashOfConfig":"39"},{"size":2071,"mtime":1616364255597,"results":"48","hashOfConfig":"39"},{"size":618,"mtime":1612820967289,"results":"49","hashOfConfig":"39"},{"size":2319,"mtime":1613140824619,"results":"50","hashOfConfig":"51"},{"size":1651,"mtime":1616363585126,"results":"52","hashOfConfig":"39"},{"size":741,"mtime":1614952081828,"results":"53","hashOfConfig":"39"},{"size":3005,"mtime":1616085453400,"results":"54","hashOfConfig":"39"},{"size":10072,"mtime":1615414717454,"results":"55","hashOfConfig":"39"},{"size":34820,"mtime":1616365753201,"results":"56","hashOfConfig":"39"},{"size":46278,"mtime":1616013844986,"results":"57","hashOfConfig":"39"},{"size":2528,"mtime":1615825469410,"results":"58","hashOfConfig":"39"},{"size":1901,"mtime":1615980152547,"results":"59","hashOfConfig":"39"},{"size":1045,"mtime":1615905875303,"results":"60","hashOfConfig":"39"},{"size":16954,"mtime":1615905614965,"results":"61","hashOfConfig":"39"},{"size":2213,"mtime":1613086149703,"results":"62","hashOfConfig":"39"},{"size":15276,"mtime":1616369316160,"results":"63","hashOfConfig":"39"},{"size":5825,"mtime":1615330372304,"results":"64","hashOfConfig":"39"},{"size":2493,"mtime":1615906038379,"results":"65","hashOfConfig":"39"},{"size":491,"mtime":1614904469938,"results":"66","hashOfConfig":"39"},{"size":2120,"mtime":1616085176682,"results":"67","hashOfConfig":"39"},{"size":3685,"mtime":1616364394148,"results":"68","hashOfConfig":"39"},{"size":5285,"mtime":1616369175126,"results":"69","hashOfConfig":"39"},{"size":8058,"mtime":1615970965979,"results":"70","hashOfConfig":"39"},{"size":9267,"mtime":1616362597619,"results":"71","hashOfConfig":"39"},{"size":2525,"mtime":1615902467076,"results":"72","hashOfConfig":"39"},{"size":4182,"mtime":1615826052311,"results":"73","hashOfConfig":"39"},{"size":8361,"mtime":1616080817943,"results":"74","hashOfConfig":"39"},{"size":685,"mtime":1615905909763,"results":"75","hashOfConfig":"39"},{"size":3179,"mtime":1616367495494,"results":"76","hashOfConfig":"39"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},"1f5ln2e",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xhk8fg",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"87"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/reportWebVitals.js",[],["161","162"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/index.tsx",[],["163","164"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/App.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Legal.tsx",[],["165","166"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/errorpages/NotFound.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Donate.tsx",[],["167","168"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Landing.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/About.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Mockdata.ts",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Interfaces.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Credits.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/Extensions.js",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Logic.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/TwitterRedirect.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pusher/Pusher.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/1_join/Join.tsx",[],["169","170"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/Match.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/Setup.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/lobby/Lobby.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/players/Players.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/lobby/profiles/Profiles.tsx",["171"],"import st from './Profiles.module.scss';\n\n//interfaces\nimport {Profile} from 'components/Interfaces'\nimport {ProfilesUsage} from 'components/Interfaces'\nimport {TwitterStatus} from 'components/Interfaces'\n//components\nimport TwitterProfileList from 'components/00_shared/profiles/TwitterProfileList'\n\nexport default function Profiles(profiles:Profile[],\n                                 onRemoveProfile:(deletedUser: Profile) => void) {\n    \n    const onRemoveClick = (deletedUser: Profile) => {\n        onRemoveProfile(deletedUser)\n    }\n\n    const getContent = () => {\n        if (profiles.length === 0) {\n            return  <div className={st.Empty_Con}>\n                        Add profiles to play from the search or the popular profiles section on the left\n                    </div>\n        }\n        return <TwitterProfileList\n                    parentType={ProfilesUsage.Added}\n                    data={profiles}\n                    onRemoveUser={onRemoveClick}\n                />\n    }\n\n    return (\n        getContent()\n    );\n}\n\n\n","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/add/search/Search.tsx",["172"],"import React, { useState } from 'react';\n//import  { Redirect } from 'react-router-dom'\nimport st from './Search.module.scss'\nimport {log} from 'components/Logic'\n//ui-elements\nimport TwitterProfileList from 'components/00_shared/profiles/TwitterProfileList'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport TwitterIcon from 'assets/footer/Twitter_Icon.png'\nimport TwitterIconBlack from 'assets/user/Twitter_Black.png'\n//logic\nimport {didUserExceedLimit} from 'components/Logic'\n//interfaces\nimport {Profile} from 'components/Interfaces'\nimport {LocalStorage} from 'components/Interfaces'\nimport {TwitterStatus} from 'components/Interfaces'\nimport {ProfilesUsage} from 'components/Interfaces'\n//functional-interfaces\nimport {SearchProps} from 'components/Functional_Interfaces'\n//components\nimport * as Not from 'components/00_shared/notification/Notification'\n\nconst stateInitArray:Profile[] = []\n\n/*\n//status for step 1\nenum TokenStatus {\n    init,\n    requested,\n    error,\n    //no received, since there is a immediate redirect on receive\n}\n\n//status for saved token from localstorage\nenum TokenVerify {\n    init,\n    pending,\n    fail,\n    success\n}\n*/\n\n//search request type\nenum RequestType {\n    inital,\n    more\n}\n\nlet actionTimestamps:string[] = []\n\nexport default function Search(props:SearchProps) {\n    const [page, setPage] = useState(1);\n    const [userObjects, setUserObjects] = useState(stateInitArray);\n    const [searchInput, setSearchInput] = useState(\"\");\n    const [lastSearchString, setLastSearchString] = useState(\"\");\n    const [searchEnabled, setSearchEnabled] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [twitterStatus, setTwitterStatus] = useState(TwitterStatus.none)\n    //const [tokenStatus, setTokenStatus] = useState(TokenStatus.init)\n    //const [tokenVerifyStatus, setTokenVerifyStatus] = useState(TokenVerify.init)\n    //const [redirectURL, setRedirectURL] = useState('')\n\n    \n    /*\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => {\n\n        \n        //CHECK IF USER ALREADY HAS VALID TOKEN IN LOCAL STORAGE\n        //only verify once\n        if (tokenVerifyStatus !== TokenVerify.init) {\n            return\n        }\n        //verify token & secret\n        setTokenVerifyStatus(TokenVerify.pending)\n        let accessToken = localStorage.getItem(LocalStorage.Access_Token)\n        let accessToken_Secret = localStorage.getItem(LocalStorage.Access_Token_Secret)\n        if (accessToken !== null && accessToken_Secret != null) {\n            log('token & secret available -> verify')\n            verifyCredentials(accessToken, accessToken_Secret)\n                .then(() => {\n                    //success -> enable search\n                    setTwitterStatus(TwitterStatus.signedIn)\n                }) \n                .catch(() => {\n                    setTokenVerifyStatus(TokenVerify.fail)\n                });\n        }\n    });\n    */\n    \n\n    /*\n    ##################################\n    ##################################\n                GENERAL\n    ##################################\n    ##################################\n    */\n\n    //send error notification to setup\n    const showErrNot = (msg: string) => {\n        log(msg)\n        props.newNotification('Error: ' + msg, Not.Type.Error)\n    }\n\n    const showWarNot = (msg: string) => {\n        log(msg)\n        props.newNotification('Warning: ' + msg, Not.Type.Warning)\n    }\n\n    //ACTIONS EXCEEDED\n    const actionsExceeded = () => {\n        if (didUserExceedLimit(actionTimestamps, 20, 30000)) {\n            //actions exceeded\n            props.newNotification('easy boy... small cooldown - too many actions', Not.Type.Warning)\n            return true\n        }\n        //not exceeded -> add timestamp\n        actionTimestamps.push(new Date().toISOString())\n        return false\n    }\n\n    /*\n    ##################################\n    ##################################\n            Search Users\n    ##################################\n    ##################################\n    */\n\n\n    const onSearchButtonClick = (type: RequestType) => {\n\n        if (actionsExceeded()) {\n            return\n        }\n\n        //dont fire mutiple requests\n        if (loading) {\n            showWarNot('already loading')\n            return\n        }\n\n        //check if search string is provided\n        if (!searchEnabled && RequestType.inital) {\n            showErrNot('no input string')\n            return\n        }\n\n        //check if user loads more users or searches for new\n        let qString = \"\"\n        let newPage = -1\n        if (type === RequestType.inital) {\n            setPage(1)\n            newPage = 1\n            qString = searchInput\n\n            //reset user objects\n            let _userObjects = userObjects \n            let length = _userObjects.length\n            while (length >= 0) {\n                _userObjects.pop()\n                length--\n            }\n            setUserObjects(_userObjects) \n            \n        }\n        else if (type === RequestType.more) {\n            newPage = page + 1\n            setPage(newPage)\n            qString = lastSearchString\n        }\n\n        if (qString === \"\" || newPage === -1) {\n            showErrNot('not all query parameters given')\n            return\n        }\n\n        //start request\n        setLoading(true)\n        getUsers(qString, newPage)\n            .then(res => {\n                if (res.status !== 200) {\n                    //error\n                    showErrNot(res.message)\n                    if (res.status === 44) {\n                        //-> no more users to show\n                        showWarNot('no more users available')\n                    }\n                }\n                else {\n                    //success\n                    log('successfully got data for \"' + qString + '\" at page ' + newPage)\n\n                    //if user clicks on more but deleted search string already\n                    if (searchInput.length === 0) {\n                        setLastSearchString(lastSearchString)\n                    }\n                    else {\n                        setLastSearchString(searchInput)\n                    }\n\n                    //append new user objects to current\n                    let _userObjects = userObjects\n                    let concat = _userObjects.concat(res.data)\n                    setUserObjects(concat) \n                }\n                setLoading(false)\n            }) \n            .catch(err => {\n                showErrNot('critical system error occured, check console')\n                log(err)\n                setLoading(false)\n            });\n    }\n\n\n    const getUsers = async (name: string, page: number) => {\n\n        let accessToken = localStorage.getItem(LocalStorage.Access_Token)\n        let accessToken_Secret = localStorage.getItem(LocalStorage.Access_Token_Secret)\n        if (accessToken === null) {\n            accessToken = \"\"\n        }\n        if (accessToken_Secret === null) {\n            accessToken_Secret = \"\"\n        }\n\n        //passing additional parameters in header\n        var requestOptions = {\n            headers: {\n                'q': name,\n                'page': page.toString(),\n                'token': accessToken,\n                'token_secret': accessToken_Secret\n            }\n        };\n        let request = new Request('/api/twitter/users', requestOptions)\n\n        const response = await fetch(request)\n        const body = await response.json()\n        if (response.status !== 200) throw Error(body.message)\n        \n        return body;\n    };\n\n    /*\n    ##################################\n    ##################################\n            Twitter Sign in\n    ##################################\n    ##################################\n    */\n\n    /*\n    const onSignInButtonClicked = async () => {\n\n        //alredy requested\n        if (tokenStatus === TokenStatus.requested) {\n            return\n        }\n\n        log('trying to sign in')\n        setTokenStatus(TokenStatus.requested)\n\n        //userAuth\n        let request = new Request('/api/twitter/request_token')\n        const response = await fetch(request)\n        const body = await response.json()\n        if (body.status !== 200) {\n            showErrNot(body.message) //maybe not body.message \n            setTokenStatus(TokenStatus.error)\n        }\n        else {\n            log(body)\n            //\"oauth_token=i-7ofAAAAAABLx8pAAABd86SI80&\n            //oauth_token_secret=IvoJA3G2XzQ41c9IlfgZb8HHQY8Vw6Rq&oauth_callback_confirmed=true\"\n            let str: string = body.body\n\n            //extract token\n            let search = '='\n            let start = str.indexOf(search) + search.length;\n            let end = str.indexOf('&');\n            let token = str.substring(start, end)\n\n            //extract token_secret\n            search = 'secret='\n            start = str.indexOf(search) + search.length;\n            end = str.lastIndexOf('&');\n            let tokenSecret = str.substring(start, end)\n\n            //extract matchID\n            let current = window.location.href\n            let matchID = current.substr(current.lastIndexOf('/') + 1)\n\n            //reset old access token + secret retrieved in step 3\n            localStorage.removeItem(LocalStorage.Access_Token)\n            localStorage.removeItem(LocalStorage.Access_Token_Secret)\n\n            //save tokens for current step 1\n            localStorage.setItem(LocalStorage.Token, token)\n            localStorage.setItem(LocalStorage.Token_Secret, tokenSecret)\n            localStorage.setItem(LocalStorage.MatchID, matchID)\n\n            //redirect user to: /redirect/:token\n            setRedirectURL('/redirect/' + token)\n            setTwitterStatus(TwitterStatus.tokenReceived)\n            \n        }\n    }\n\n    const verifyCredentials = async (accessToken: string, accessToken_Secret: string) => {\n        //passing additional parameters in header\n        var requestOptions = {\n            headers: {\n                'token': accessToken,\n                'token_secret': accessToken_Secret\n            }\n        };\n        let request = new Request('/api/twitter/verify_token', requestOptions)\n\n        const response = await fetch(request)\n        const body = await response.json()\n        if (body.status !== 200) {\n            showErrNot(body.message) \n            setTokenVerifyStatus(TokenVerify.fail)\n            throw new Error(body)\n        }\n        else {\n            log('valid token & secret')\n            setTokenVerifyStatus(TokenVerify.success)\n            return \"200\";\n        }\n    };\n    */\n\n\n\n    /*\n    ##################################\n    ##################################\n            Handlers\n    ##################################\n    ##################################\n    */\n    const userNameChanged = (name: string) => {\n        setSearchInput(name)\n\n        //check empty or only spaces\n        if (name.length === 0 || !name.trim()) {\n            setSearchEnabled(false)\n        }\n        else {\n            setSearchEnabled(true)\n        }\n    }\n\n    const keyPressed = (event: any) => {\n        if (event.key === 'Enter' && searchInput !== \"\") {\n            onSearchButtonClick(RequestType.inital)\n        }\n    }\n\n\n    /*\n    ##################################\n    ##################################\n            CONTENT\n    ##################################\n    ##################################\n    */\n    const getLoginComponent = () => {\n        /*\n            conditions like 'joinType' have to be passed to the Search component in order to avoid\n            errors in parent component like:\n            -> \"React has detected a change in the order of Hooks\"\n            -> \"Uncaught Invariant Violation: Rendered more hooks than during the previous render\"\n            https://reactjs.org/docs/hooks-rules.html\n        */\n        let rtn = <div></div>\n\n        return rtn\n\n        /*\n        if (twitterStatus === TwitterStatus.none) {\n            //NOT SIGNED IN\n            rtn = \n            <div className={st.Login_Con}>\n                <div className={st.Button_Con} title=\"Sign into your twitter to play your followed profiles\">\n                    <img className={st.Icon} \n                        src={TwitterIcon} \n                        alt=\"Sign into Twitter\" \n                        onClick={() => onSignInButtonClicked()}/>\n                    <button className={st.Search} \n                            onClick={() => onSignInButtonClicked()}>\n                                Sign in\n                    </button>\n                </div>\n                <div className={st.TokenStatus_Con}>\n                    {(tokenStatus === TokenStatus.error) &&\n                        <div>\n                            There was an error receiving the token.\n                        </div>\n                    }\n                    {(tokenStatus === TokenStatus.requested) &&\n                        <CircularProgress/>\n                    }\n                    {(tokenVerifyStatus === TokenVerify.fail) &&\n                        <div>\n                            Previously used user-credentials could not be verified, please sign in again.\n                        </div>\n                    }\n                </div>\n            </div>\n        }\n        else if (twitterStatus === TwitterStatus.tokenReceived) {\n            //FIRST TOKEN RECEIVED\n            rtn = \n                <Redirect to={redirectURL}/>\n        }\n        else if (twitterStatus === TwitterStatus.signedIn) {\n            //SIGNED IN\n            rtn = \n            <div className={st.Login_Con}>\n                You are signed in with your twitter user!\n            </div>\n        }\n        return rtn\n        */\n    }\n\n    return (\n        <div className={st.Con}>\n            {getLoginComponent()}\n            <div className={st.Search_Con}>\n                <div className={st.Top_Con}>\n                    <input  className={st.Input} \n                            type=\"search\" \n                            autoComplete=\"off\" \n                            placeholder=\"Search for Twitter username...\"\n                            onChange={(e) => userNameChanged(e.target.value)} \n                            onKeyPress={(e) => keyPressed(e)}/>\n                    {searchEnabled && \n                        <div className={st.Button_Con}>\n                            <img className={st.Icon} \n                                src={TwitterIcon} \n                                alt=\"Twitter\" \n                                onClick={(e) => onSearchButtonClick(RequestType.inital)}/>\n                            <button className={st.Search} \n                                    onClick={(e) => onSearchButtonClick(RequestType.inital)}>\n                                        Search\n                            </button>\n                        </div>\n                    }\n                </div>\n                {userObjects.length === 0 &&\n                    <div className={st.Empty_Con}>\n                        <div className={st.Empty_Caption}>\n                            Search for public Twitter profiles and add them by clicking the card.\n                        </div>\n                        <img className={st.Empty_Icon} \n                            src={TwitterIconBlack} \n                            alt=\"Twitter\"\n                        />\n                    </div>\n                }\n                {userObjects.length !== 0  && \n                    <div className={st.List_Con}>\n                        <TwitterProfileList\n                            parentType={ProfilesUsage.Search}\n                            data={userObjects}\n                            addedUsers={props.profiles}\n                            onAddUser={props.addProfile}\n                            onRemoveUser={() => {}}\n                            twitterStatus = {twitterStatus}\n                        />\n                        {(userObjects.length % 20 === 0) && \n                            <div className={st.More_Con}>\n                                <button className={st.More} \n                                        onClick={(e) => onSearchButtonClick(RequestType.more)}>\n                                    Show more...\n                                </button>\n                                {loading && //\"more\" loading\n                                    <div className={st.Loading_Con}>\n                                        <CircularProgress/>\n                                    </div>\n                                }\n                            </div>\n                        }\n                    </div>\n                }\n                {loading && userObjects.length === 0 && //\"inital\" loading\n                <div className={st.Loading_Con}>\n                    <CircularProgress/>\n                </div>\n                }\n            </div>\n        </div>\n    );\n}\n\n\n\n/*\n\n\n\n\n\n\n*/\n",["173","174"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/0_root/Footer.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/tweet/Tweet.tsx",["175"],"import React from 'react'\nimport st from './Tweet.module.scss'\nimport {log} from 'components/Logic'\n\n//interfaces\nimport {Tweet} from 'components/Interfaces'\n//ui-elements\nimport VerifiedIcon from 'assets/tweet/VerifiedIcon.png'\nimport TwitterIcon from 'assets/tweet/Twitter_Icon.png'\nimport Reply_Icon from 'assets/tweet/Reply.png'\nimport Retweet_Icon from 'assets/tweet/Retweet.png'\nimport Like_Icon from 'assets/tweet/Like.png'\nimport QuestionMark from 'assets/tweet/QuestionMark.png'\n\n\n/*\n##################################\n            EXPORT\n##################################\n*/\ninterface Props {\n    tweet: Tweet\n    onPicClick:(picURL:string) => void\n}\nexport const getComponent = (tweet:Tweet, onPicClick:(picURL:string) => void) => {\n    let props:Props = {\n        tweet: tweet,\n        onPicClick: onPicClick\n    }\n    return React.createElement(TweetLogic, props)\n}\n\n/*\n##################################\n            LOGIC\n##################################\n*/\n\n//from: https://stackoverflow.com/a/9462382/6421228\nconst nFormatter = (input: string, digits = 2) => {\n\n    let num: number = +input\n\n    let si = [\n        { value: 1, symbol: \"\" },\n        { value: 1E3, symbol: \"k\" },\n        { value: 1E6, symbol: \"M\" },\n        { value: 1E9, symbol: \"G\" },\n        { value: 1E12, symbol: \"T\" },\n        { value: 1E15, symbol: \"P\" },\n        { value: 1E18, symbol: \"E\" }\n    ]\n    let rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/\n    let i\n    for (i = si.length - 1; i > 0; i--) {\n        if (num >= si[i].value) {\n            break\n        }\n    }\n    return (num / si[i].value).toFixed(digits).replace(rx, \"$1\") + si[i].symbol\n}\n\nfunction TweetLogic(props:Props) {\n\n    const formatDate = (input:string):string => {\n        //input: 2019-06-06T14:59:47.000Z\n        let parsed = new Date(input).toLocaleDateString() \n        //parsed: 06/06/2019\n        let elements = parsed.split('/')\n        let m = \"\"\n        let nr:number = +elements[1]\n        if      (nr === 1) {m='Jan'}\n        else if (nr === 2) {m='Feb'}\n        else if (nr === 3) {m='Mar'}\n        else if (nr === 4) {m='Apr'}\n        else if (nr === 5) {m='May'}\n        else if (nr === 6) {m='Jun'}\n        else if (nr === 7) {m='Jul'}\n        else if (nr === 8) {m='Aug'}\n        else if (nr === 9) {m='Sep'}\n        else if (nr === 10) {m='Oct'}\n        else if (nr === 11) {m='Nov'}\n        else if (nr === 12) {m='Dec'}\n        let d = `${+elements[0]} ${m} ${elements[2]}`\n        return d\n    }\n\n    const getContent = () => {\n\n        //log(props.tweet)\n\n        //determine if name contains emoji\n        let userNameClass = st.UserName\n        if (/\\p{Extended_Pictographic}/u.test(props.tweet.t_userName) ) {\n            userNameClass = st.UserName_Emoji\n        }\n\n        /*\n        ###########################\n                TEXT\n        ###########################\n        */\n\n         /*\n            TODO:\n                https://stackoverflow.com/a/27422629/6421228\n                https://dev.w3.org/html5/html-author/charref\n\n                -> https://ascii.cl/htmlcodes.htm !!!!!!\n\n                q\n                -> ampersand (&) is escaped to &amp; \n                convert HTML codes into characters -> https://ascii.cl/htmlcodes.htm \n\n                let htmlChars = {\n                    quot: '\"',\n                    amp: '&',\n                    lt: '<',\n                    gt: '>',\n                }\n        */\n        \n        //https://stackoverflow.com/a/43282001\n        function convertHTMLEntity(text:string){\n            const span = document.createElement('span')\n            return text\n            .replace(/&[#A-Za-z0-9]+;/gi, (entity,position,text)=> {\n                span.innerHTML = entity\n                return span.innerText\n            });\n        }\n        let dec_tweetText = convertHTMLEntity(props.tweet.c_text)\n        //log(dec_tweetText)\n\n\n        /*\n        Hashtags AND Usernames can only contain letters, numbers, and underscores (_) \n        -> no special characters\n        */\n        //FROM HERE: https://stackoverflow.com/a/25693471\n        function findSpecialWords(searchText:string, links:boolean=false) {\n            let regexp = /(\\s|^)#\\w\\w+\\b/gm\n            if (links) {\n                regexp = /(\\s|^)@\\w\\w+\\b/gm\n            }\n            let result = searchText.match(regexp)\n            if (result) {\n                result = result.map(function(s:any){ return s.trim();})\n                return result\n            } else {\n                return false\n            }\n        }\n\n        //log(props.tweet.c_text)\n        //EXTRACT HASHTAGS\n        let foundHastags:RegExpMatchArray = []\n        let hashtags = findSpecialWords(dec_tweetText)\n        if (hashtags) {foundHastags = hashtags}\n        //log(hashtags)\n        //EXTRACT USERTAGS\n        let foundTags:RegExpMatchArray = []\n        let tags = findSpecialWords(dec_tweetText, true)\n        if (tags) {foundTags = tags}\n        //log(tags)\n        //split at line breaks\n        let blocks = dec_tweetText.split(/\\r?\\n/)\n        //log(blocks)\n\n        function isHashtag(word:string):string {\n            for(let i=0;i<foundHastags.length;i++) {\n                //also detect: #MalalaDay,\n                if (word.indexOf(foundHastags[i]) >= 0) {return foundHastags[i]}\n            }\n            return \"\"\n        }\n        function isUsertag(word:string):string {\n            for(let i=0;i<foundTags.length;i++) {\n                //also detect: #MalalaDay,\n                if (word.indexOf(foundTags[i]) >= 0) {return foundTags[i]}\n            }\n            return \"\"\n        }\n        //get random key\n        let key = 0\n        function grk():string {\n            return '' + key++\n        }\n\n        /*\n            Wishing a very happy birthday to @Malala! \n            To celebrate #MalalaDay, join me and the @GirlsAlliance\n            in our work to empower girls around the world. \n            Check out http://girlsopportunityalliance.org to learn more and get involved.\n            -> split text into spans if it contains #hastags or @links\n        */\n        let text = [<span key=\"-1\"></span>]\n        text = []\n        //loop each block\n        for(let i=0;i<blocks.length;i++) {\n            //split block\n            let words = blocks[i].split(/[ ]+/)\n            //loop each word\n            for(let j=0;j<words.length;j++) {\n                let word = words[j]\n\n                //determine word category\n                let hashtag = isHashtag(word)\n                let usertag = isUsertag(word)\n                //check hashtag\n                if (hashtag !== \"\") {\n                    text.push(  <a className={st.Link} key={grk()} href={\"https://twitter.com/hashtag/\" + word.substring(1)} target=\"_blank\" rel=\"noreferrer\" title=\"View hastag\">\n                                    <span className={st.Text_Link} key={grk()}>{hashtag}</span>\n                                </a>)\n                    let rest = word.replace(hashtag, \"\") //like: '#MalalaDay,' -> ','\n                    if (rest !== \"\") {\n                        text.push(<span className={st.Text} key={grk()}>{rest}</span>)\n                    }\n                }\n                //check usertag\n                else if (usertag !== \"\") {\n                    text.push(  <a className={st.Link} key={grk()} href={\"https://twitter.com/\" + word.substring(1)} target=\"_blank\" rel=\"noreferrer\" title=\"View profile\">\n                                    <span className={st.Text_Link} key={grk()}>{usertag}</span>\n                                </a>)\n                    let rest = word.replace(usertag, \"\") //like: '@Malala!' -> '!'\n                    if (rest !== \"\") {\n                        text.push(<span className={st.Text} key={grk()}>{rest}</span>)\n                    }\n                }\n                //normal word\n                else {\n                    text.push(<span className={st.Text} key={grk()}>{word}</span>)\n                }\n                //insert space after each word\n                text.push(<span key={grk()}> </span>)\n            }\n            //line break after block -> not at last one\n            if (i < blocks.length-1) {\n                text.push(<br key={grk()}></br>)\n            }\n        }\n\n        /*\n        ###########################\n                PICTURES\n        ###########################\n        */\n\n        const show = (picUrl:string) => {\n            props.onPicClick(picUrl)\n        }\n\n        let pic1 = props.tweet.c_photo1\n        let pic2 = props.tweet.c_photo2\n        let pic3 = props.tweet.c_photo3\n        let pic4 = props.tweet.c_photo4\n\n        let count = 0\n        if (pic1 !== \"\") {count++}\n        if (pic2 !== \"\") {count++}\n        if (pic3 !== \"\") {count++}\n        if (pic4 !== \"\") {count++}\n\n        let picturesComponent = <div></div>\n\n        //ONE\n        if (count === 1) {\n            picturesComponent = \n            <div className={st.Images_Con}>\n                <img className={st.OnePic} src={pic1} alt=\"\" onClick={() => {show(pic1)}}/>\n            </div>\n        }\n        else if (count === 2) {\n            picturesComponent = \n            <div className={st.Images_Con}>\n                <img className={st.Two_Left} src={pic1} alt=\"\" onClick={() => {show(pic1)}}/>\n                <img className={st.Two_Right} src={pic2} alt=\"\" onClick={() => {show(pic2)}}/>\n            </div>\n        }\n        else if (count === 3) {\n\n            //<img className={st.Three_Right_Top} src={tweet.c_photo2} alt=\"\"/>\n            //<img className={st.Three_Right_Bottom} src={tweet.c_photo3} alt=\"\"/>\n            picturesComponent =  \n                <div className={st.Images_Con}>\n                    <div className={st.Three_Left_Con}>\n                        <img className={st.Three_Left} src={pic1} alt=\"\" onClick={() => {show(pic1)}}/>\n                    </div>\n                    <div className={st.Three_Right_Con}>\n                        <div className={st.Three_Right_Top_Con}>\n                            <img className={st.Three_Right_Top} src={pic2} alt=\"\" onClick={() => {show(pic2)}}/>\n                        </div>\n                        <div className={st.Three_Right_Bottom_Con}>\n                            <img className={st.Three_Right_Bottom} src={pic3} alt=\"\" onClick={() => {show(pic3)}}/>\n                        </div>\n                    </div>\n                </div>\n        }\n        else if (count === 4) {\n            picturesComponent =  \n                <div className={st.Images_Con}>\n                    <div className={st.Four_Left_Con}>\n                        <div className={st.Four_Left_Top_Con}>\n                            <img className={st.Four_Left_Top} src={pic1} alt=\"\" onClick={() => {show(pic1)}}/>\n                        </div>\n                        <div className={st.Four_Left_Bottom_Con}>\n                            <img className={st.Four_Left_Bottom} src={pic2} alt=\"\" onClick={() => {show(pic2)}}/>\n                        </div>\n                    </div>\n                    <div className={st.Four_Right_Con}>\n                        <div className={st.Four_Right_Top_Con}>\n                            <img className={st.Four_Right_Top} src={pic3} alt=\"\" onClick={() => {show(pic3)}}/>\n                        </div>\n                        <div className={st.Four_Right_Bottom_Con}>\n                            <img className={st.Four_Right_Bottom} src={pic4} alt=\"\" onClick={() => {show(pic4)}}/>\n                        </div>\n                    </div>\n                </div>\n        }\n\n        //TOP COMPONENT ICONS\n        let userIconComp = <div></div>\n        let userVerifiedComp = <div></div>\n        let tweetIconComp = <div></div>\n        if (props.tweet.t_profileURL === '') {\n            userIconComp = \n                <img className={st.Pic} src={QuestionMark} alt=\"User\"/>\n            userVerifiedComp =\n                <img className={st.Verified_Icon_Disabled} src={VerifiedIcon} alt=\"Verified\"/>\n        }\n        else {\n            userIconComp = \n                <a href={props.tweet.t_profileURL} target=\"_blank\" rel=\"noreferrer\" title=\"View twitter profile\">\n                    <img className={st.Pic} src={props.tweet.t_userPicURL} alt=\"User\"/>\n                </a>\n            userVerifiedComp =\n                <img className={st.Verified_Icon} src={VerifiedIcon} title=\"Verified User\" alt=\"Verified\"/>\n        }\n\n        //only enable clicking on twitter icon when solution is here\n        if (props.tweet.t_tweetURL === '') {\n            tweetIconComp = \n                <img className={st.Twitter_Icon_Disabled} src={TwitterIcon} alt=\"Tweet\"/>\n        }\n        else {\n            tweetIconComp = \n                <a href={props.tweet.t_tweetURL} target=\"_blank\" rel=\"noreferrer\" title=\"View tweet\">\n                    <img className={st.Twitter_Icon} src={TwitterIcon} alt=\"Tweet\"/>\n                </a>\n        }\n\n\n        //COMPOSE TWEET\n        let content = \n        <div className ={st.Con}>\n            <div className ={st.Inside_Con}>\n                {/*TOP*/}\n                <div className={st.Top_Con}>\n                    {userIconComp}\n                    <div className={st.UserCard_Con}>\n                        <div className={st.Names_Con}>\n                            <div className={st.UserName_Con}>\n                                <div className={userNameClass} title={props.tweet.t_userName}>\n                                    {props.tweet.t_userName}\n                                </div>\n                                {props.tweet.t_userVerified && userVerifiedComp}\n                            </div>\n                            <div className={st.UserTag}>\n                                @{props.tweet.t_userTag}\n                            </div>\n                        </div>\n                        {tweetIconComp}\n                    </div>\n                </div>\n                {/*CONTENT*/}\n                <div className={st.Content_Con}>\n                    <div className={st.Text_Con}>\n                        <span>{text}</span>\n                    </div>\n                    {picturesComponent}\n                    <div className={st.Date_Con}>\n                        {formatDate(props.tweet.b_date)}\n                    </div>\n                </div>\n                {/*BOTTOM*/}\n                <div className={st.Bot_Con}>\n                    <div className={st.Reply_Con}>\n                        <img className={st.Bot_Icon_Reply} src={Reply_Icon} alt=\"Reply\"/>\n                        <div className={st.Bot_Number}>{nFormatter(props.tweet.b_replyCount)}</div>\n                    </div>\n                    <div className={st.Retweet_Con}>\n                        <img className={st.Bot_Icon_Retweet} src={Retweet_Icon} alt=\"Retweet\"/>\n                        <div className={st.Bot_Number}>{nFormatter(props.tweet.b_retweetCount)}</div>\n                    </div>\n                    <div className={st.Like_Con}>\n                        <img className={st.Bot_Icon_Like} src={Like_Icon} alt=\"Like\"/>\n                        <div className={st.Bot_Number}>{nFormatter(props.tweet.b_likeCount)}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        return content\n    }\n\n    return (\n        getContent()\n    )\n}\n\n\n\n\n","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/TwitterCallback.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/add/Add.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/0_root/Header.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/Countdown.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/nav/Nav.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/nav/pages/Ranking.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/chat/Chat.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/settings/Settings.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/notification/Notification.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/interaction/Interaction.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/00_shared/profiles/TwitterProfileList.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/2_setup/add/popular/PopularProfiles.tsx",["176"],"import st from './PopularProfiles.module.scss';\n\n//interfaces\nimport {ProfilesUsage} from 'components/Interfaces'\nimport {TwitterStatus} from 'components/Interfaces'\n//functional-interfaces\nimport {PopularProfilesProps} from 'components/Functional_Interfaces'\n//components\nimport TwitterProfileList from 'components/00_shared/profiles/TwitterProfileList'\n\nexport default function PopularProfiles(props:PopularProfilesProps) {\n\n    return (\n        <div className={st.Con}>\n            <TwitterProfileList\n                parentType={ProfilesUsage.Search}\n                data={props.popularProfiles}\n                onAddUser={props.addProfile}\n            />\n        </div>\n    )\n}\n\n\n","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/3_match/nav/pages/Sorting.tsx",[],{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"177","replacedBy":"181"},{"ruleId":"179","replacedBy":"182"},{"ruleId":"177","replacedBy":"183"},{"ruleId":"179","replacedBy":"184"},{"ruleId":"177","replacedBy":"185"},{"ruleId":"179","replacedBy":"186"},{"ruleId":"177","replacedBy":"187"},{"ruleId":"179","replacedBy":"188"},{"ruleId":"189","severity":1,"message":"190","line":6,"column":9,"nodeType":"191","messageId":"192","endLine":6,"endColumn":22},{"ruleId":"189","severity":1,"message":"193","line":57,"column":27,"nodeType":"191","messageId":"192","endLine":57,"endColumn":43},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"189","severity":1,"message":"194","line":3,"column":9,"nodeType":"191","messageId":"192","endLine":3,"endColumn":12},{"ruleId":"189","severity":1,"message":"190","line":5,"column":9,"nodeType":"191","messageId":"192","endLine":5,"endColumn":22},"no-native-reassign",["195"],"no-negated-in-lhs",["196"],["195"],["196"],["195"],["196"],["195"],["196"],["195"],["196"],"@typescript-eslint/no-unused-vars","'TwitterStatus' is defined but never used.","Identifier","unusedVar","'setTwitterStatus' is assigned a value but never used.","'log' is defined but never used.","no-global-assign","no-unsafe-negation"]