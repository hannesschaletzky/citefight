[{"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/reportWebVitals.js":"1","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/index.tsx":"2","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/App.tsx":"3","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/root/Header.tsx":"4","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/menu/Menu.jsx":"5","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/Match.tsx":"6","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Legal.tsx":"7","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/root/Footer.tsx":"8","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/errorpages/NotFound.tsx":"9","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/Tweet.tsx":"10","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Donate.tsx":"11","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Landing.tsx":"12","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/Mockup.tsx":"13","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/About.tsx":"14","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/Setup.tsx":"15","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Mockdata.ts":"16","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/search/Search.tsx":"17","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/pages/Nav_Ranking.tsx":"18","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/Nav.tsx":"19","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/Images.tsx":"20","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/BottomPart.tsx":"21","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/pages/Nav_Answers.tsx":"22","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/players/Players.tsx":"23","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/chat/Chat.tsx":"24","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/TopPart.tsx":"25","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Interfaces.tsx":"26","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Credits.tsx":"27","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/Extensions.js":"28","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/interaction/Interaction.tsx":"29","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Logic.tsx":"30","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/TwitterRedirect.tsx":"31","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/TwitterCallback.tsx":"32","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/join/Join.tsx":"33","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/search/TwitterProfileList.tsx":"34","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/info/Info.tsx":"35","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/lobby/profiles/Profiles.tsx":"36","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/lobby/settings/Settings.tsx":"37","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/lobby/Lobby.tsx":"38"},{"size":362,"mtime":1612013307768,"results":"39","hashOfConfig":"40"},{"size":500,"mtime":1612016004776,"results":"41","hashOfConfig":"40"},{"size":2575,"mtime":1614454777554,"results":"42","hashOfConfig":"40"},{"size":619,"mtime":1612214882618,"results":"43","hashOfConfig":"40"},{"size":3059,"mtime":1611754162164,"results":"44","hashOfConfig":"40"},{"size":271,"mtime":1612823122249,"results":"45","hashOfConfig":"40"},{"size":401,"mtime":1611867431112,"results":"46","hashOfConfig":"40"},{"size":2213,"mtime":1613086149703,"results":"47","hashOfConfig":"40"},{"size":500,"mtime":1612823136652,"results":"48","hashOfConfig":"40"},{"size":1106,"mtime":1612802141414,"results":"49","hashOfConfig":"40"},{"size":322,"mtime":1612820947127,"results":"50","hashOfConfig":"40"},{"size":1249,"mtime":1612214819003,"results":"51","hashOfConfig":"40"},{"size":1619,"mtime":1612814853355,"results":"52","hashOfConfig":"40"},{"size":318,"mtime":1612820938975,"results":"53","hashOfConfig":"40"},{"size":32896,"mtime":1614556278954,"results":"54","hashOfConfig":"40"},{"size":6643,"mtime":1614555212187,"results":"55","hashOfConfig":"40"},{"size":16508,"mtime":1614545379236,"results":"56","hashOfConfig":"40"},{"size":6749,"mtime":1612814305974,"results":"57","hashOfConfig":"40"},{"size":3589,"mtime":1613575257068,"results":"58","hashOfConfig":"40"},{"size":4765,"mtime":1612216103823,"results":"59","hashOfConfig":"40"},{"size":1532,"mtime":1612216278448,"results":"60","hashOfConfig":"40"},{"size":3050,"mtime":1612814163876,"results":"61","hashOfConfig":"40"},{"size":1890,"mtime":1614507086442,"results":"62","hashOfConfig":"40"},{"size":6030,"mtime":1614508793135,"results":"63","hashOfConfig":"40"},{"size":1689,"mtime":1614555193565,"results":"64","hashOfConfig":"40"},{"size":3318,"mtime":1614555058309,"results":"65","hashOfConfig":"40"},{"size":618,"mtime":1612820967289,"results":"66","hashOfConfig":"40"},{"size":2319,"mtime":1613140824619,"results":"67","hashOfConfig":"68"},{"size":4219,"mtime":1614508059545,"results":"69","hashOfConfig":"40"},{"size":628,"mtime":1613583861637,"results":"70","hashOfConfig":"40"},{"size":741,"mtime":1614158254082,"results":"71","hashOfConfig":"40"},{"size":5844,"mtime":1614293370533,"results":"72","hashOfConfig":"40"},{"size":4345,"mtime":1614455056436,"results":"73","hashOfConfig":"40"},{"size":6799,"mtime":1614548140537,"results":"74","hashOfConfig":"40"},{"size":266,"mtime":1614461893853,"results":"75","hashOfConfig":"40"},{"size":1163,"mtime":1614472574018,"results":"76","hashOfConfig":"40"},{"size":7523,"mtime":1614528755712,"results":"77","hashOfConfig":"40"},{"size":2956,"mtime":1614542746550,"results":"78","hashOfConfig":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},"1f5ln2e",{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xhk8fg",{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/reportWebVitals.js",[],["165","166"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/index.tsx",[],["167","168"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/App.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/root/Header.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/menu/Menu.jsx",[],["169","170"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/Match.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Legal.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/root/Footer.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/errorpages/NotFound.tsx",[],["171","172"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/Tweet.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Donate.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Landing.tsx",[],["173","174"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/Mockup.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/About.tsx",[],["175","176"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/Setup.tsx",["177","178"],"/* eslint-disable react/jsx-pascal-case */\nimport { useRef, useReducer, useEffect, useState } from 'react';\nimport  { Redirect } from 'react-router-dom'\nimport st from './Setup.module.scss'\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport {Tweet, Tweet_TopPart, Tweet_Content, Tweet_BottomPart} from 'components/Interfaces'\n\nimport {LocalStorage} from 'components/Interfaces'\nimport {Setup_Event} from 'components/Interfaces'\nimport {Setup_Player} from 'components/Interfaces'\nimport {Setup_ChatMsg} from 'components/Interfaces'\nimport {Twitter_Profile} from 'components/Interfaces'\nimport {SysMsgType} from 'components/Interfaces'\nimport {SetupEventType} from 'components/Interfaces'\nimport {Setup_Notification} from 'components/Interfaces'\nimport {NotificationType} from 'components/Interfaces'\nimport {PusherState} from 'components/Interfaces'\nimport {Setup_Settings} from 'components/Interfaces'\nimport {Settings_Roundtime} from 'components/Interfaces'\nimport {Settings_DrinkingMode} from 'components/Interfaces'\nimport {Settings_Pictures} from 'components/Interfaces'\n\nimport Lobby from './lobby/Lobby'\nimport Info from './info/Info'\nimport Search from './search/Search'\nimport Interaction from './interaction/Interaction'\nimport Players from './players/Players'\nimport Chat from './chat/Chat'\nimport BottomPart from '../tweet/parts/BottomPart';\n\nconst Pusher = require('pusher-js');\n\nconst init_profiles:Twitter_Profile[] = []\nconst init_players:Setup_Player[] = []\nconst init_chat:Setup_ChatMsg[] = []\nconst init_notification:Setup_Notification = {\n    display: false,\n    msg: \"\",\n    type: NotificationType.Not_Success,\n    scssClass: ''\n}\n\n//settings to start game with\nconst init_settings:Setup_Settings = {\n    rounds: 25,\n    roundtime: Settings_Roundtime.Normal,\n    roundtimeCustom: 20,\n    autoContinue: true,\n    pictures: Settings_Pictures.AtHalftime,\n    drinking: Settings_DrinkingMode.Off\n}\n\nlet init_pusherCient:any = null\nlet init_pusherChannel:any = null\n\nexport default function Setup() {\n    //state\n    const [redirectToJoin,setRedirectToJoin] = useState(false)\n    //refs\n    const ref_profiles = useRef(init_profiles)\n    const ref_settings = useRef(init_settings)\n    const ref_players = useRef(init_players)\n    const ref_chat = useRef(init_chat)\n    const ref_pusherState = useRef(PusherState.init)\n    const ref_notification = useRef(init_notification)\n\n    //control flow refs\n    const ref_username = useRef(\"\")\n    const ref_pusherClient = useRef(init_pusherCient)\n    const ref_pusherChannel = useRef(init_pusherChannel)\n\n    const [,forceUpdate] = useReducer(x => x + 1, 0);\n    \n    let notTimeout = setTimeout(() => {}, 1) //store notification-timeout \n\n    const channelName = 'presence-Game2'\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => {\n\n        //CHECK SESSION STORAGE TO DETERMINE WHERE USER CAME FROM\n\n        //twitter login callback && join page\n        let twitterLoginSucces = sessionStorage.getItem(LocalStorage.TwitterLoginSuccess)\n        let join = sessionStorage.getItem(LocalStorage.JoinGame)\n        if (twitterLoginSucces !== null || join != null) {\n            //get username\n            let savedUsername = localStorage.getItem(LocalStorage.Username)\n            if (savedUsername !== null) {\n                ref_username.current = savedUsername\n                //remove session storage tokens -> prevent infinite loop\n                sessionStorage.removeItem(LocalStorage.JoinGame)\n                sessionStorage.removeItem(LocalStorage.TwitterLoginSuccess) \n                joinGame()\n                return\n            }\n        }\n        \n        //only check for redirect back to join page when user not already in state\n        if (ref_pusherState.current === PusherState.init) {\n            setRedirectToJoin(true)\n        }\n\n    })\n\n    /*\n    ##################################\n    ##################################\n        GENERAL FUNCTIONS\n    ##################################\n    ##################################\n    */\n\n    const getIndexOfUser = (name:string):number => {\n        for (let i=0; i<ref_players.current.length;i++) {\n            let user = ref_players.current[i]\n            if (user.name === name) {\n                return i\n            }\n        }\n        //console.log('ERROR: could not find user in players array')\n        return -1\n    }\n\n    \n    const setPusherState = (state:PusherState) => {\n        console.log('set state to: ' + state)\n        ref_pusherState.current = state\n        forceUpdate()\n    }\n    \n    const addSysMsg = (type:SysMsgType, inputMsg:string) => {\n\n        //create msg\n        let msg:Setup_ChatMsg = {\n            n: '',\n            m: '',\n            t: type\n        }\n\n        //determine type \n        if (type === SysMsgType.welcome) {\n            msg.m = inputMsg\n        }\n        else if (type === SysMsgType.userJoined) {\n            msg.m = inputMsg + ' joined 🎊'\n        }\n        else if (type === SysMsgType.userLeft) {\n            msg.m = inputMsg + ' left 😭'\n        }\n        else if (type === SysMsgType.info) {\n            msg.m = '📢 ' + inputMsg\n        }\n        \n        //add\n        ref_chat.current.push(msg)\n    }\n\n    const showNotification = (msg:string, notType:NotificationType)  => {\n        let newNot:Setup_Notification = {\n            display: true,\n            msg: msg,\n            type: notType,\n            scssClass: ''\n        }\n        //set scss class\n        if (notType === NotificationType.Not_Success) {\n            newNot.scssClass = st.Not_Success\n        }\n        else if (notType === NotificationType.Not_Warning) {\n            newNot.scssClass = st.Not_Warning\n        }\n        else if (notType === NotificationType.Not_Error) {\n            newNot.scssClass = st.Not_Error\n        }\n        //update UI\n        ref_notification.current = newNot\n        forceUpdate()\n\n        //clear old timeout && set new timer to hide it after seconds\n        clearTimeout(notTimeout)\n        notTimeout = setTimeout(hideNotification, 5000);\n    }\n\n    const hideNotification = () => {\n        ref_notification.current.display = false\n        forceUpdate()\n    }\n\n    /*\n    ##################################\n    ##################################\n            MANAGE MATCH SETUP \n    ##################################\n    ##################################\n    */\n\n    const init_tweets:Tweet[] = []\n    const noMoreTweets = useRef(false)\n    const currentMaxID = useRef('')\n    const tweets = useRef(init_tweets)\n    const triggerMatchSetup = async () => {\n\n        let rounds = 3 //how many rounds will timeline be iterated backwards\n\n        //loop profiles and fetch tweets in several rounds\n        for(let i=0;i<ref_profiles.current.length;i++) {\n            let profile = ref_profiles.current[i]\n            console.log(profile.id_str + ' - fetching tweets for: ' + profile.name)\n\n            currentMaxID.current = ''\n            noMoreTweets.current = false\n            tweets.current = []\n\n            //loop rounds\n            for(let j=0;j<rounds;j++) {\n\n                if (noMoreTweets.current) {\n                    break\n                }\n                console.log('Round: ' + (j+1))\n\n                await getTweets(profile.id_str, currentMaxID.current)\n                .then(res => {\n                    console.log('\\t' + res.length)\n                    if (res.length === 0) {\n                        noMoreTweets.current = true\n                    }\n                    else if (res.length === 1 && res[0].id_str === currentMaxID.current) {\n                        //last tweet (maxid) came back itself\n                        noMoreTweets.current = true\n                    }\n                    else {\n                        currentMaxID.current = res[res.length-1].id_str\n                        if (j >= 1) {\n                            //remove last bc its first in new round\n                            tweets.current.pop()\n                        }\n                        let parsedTweets = parseTweets(res, profile)\n                        tweets.current = tweets.current.concat(parsedTweets)\n                    }\n                })\n                .catch(err => {\n                    console.log('error retrieving tweets: ' + err)\n                    return\n                })\n            }\n            console.log(tweets.current.length + ' total tweets')\n            console.log(tweets.current)\n        }\n\n    }\n\n\n    const getTweets = async (userid:string, maxid:string='') => {\n\n        var requestOptions = {\n            headers: {\n                'userid': userid,\n                'maxid': maxid\n            }\n        };\n        let request = new Request('/api/twitter/tweets', requestOptions)\n        const response = await fetch(request)\n        const body = await response.json()\n        if (response.status !== 200) {\n            throw Error(body)\n        }\n        //console.log(body.data.length + ' tweets')\n        //console.log(body)\n        return body.data\n    }\n\n    const parseTweets = (data:[], profile:Twitter_Profile):Tweet[] => {\n        let parsed:Tweet[] = []\n\n        for(let i=0;i<data.length;i++) {\n\n            let item:any = data[i]\n\n            //TOP PART\n            //\"Absolutely upsetting week. https://t.co/JumIw4XgV3\"\n            let text_org:string = item.text\n            let linkIndex = text_org.lastIndexOf('https://')\n            let link = text_org.substring(linkIndex).trim()\n            let topPart:Tweet_TopPart = {\n                userName: profile.name,\n                userTag: profile.screen_name,\n                userVerified: profile.verified,\n                profileURL: 'https://twitter.com/' + profile.screen_name,\n                userPicURL: profile.profile_image_url_https,\n                tweetURL: link\n            }\n\n\n            //CONTENT\n            //\"Absolutely upsetting week. https://t.co/JumIw4XgV3\"\n            //subtract link from text\n            let index = text_org.lastIndexOf('https://')\n            let text_cut = text_org.substring(0, index).trimEnd()\n            //media\n            let ph1 = \"\"\n            let ph2 = \"\"\n            let ph3 = \"\"\n            let ph4 = \"\"\n            let media = []\n            if (item.extended_entities.media !== undefined) {\n                media = item.extended_entities.media\n\n\n            }\n\n\n\n            let content:Tweet_Content = {\n                text: text_cut,\n                photo1: ph1,\n                photo2: ph2,\n                photo3: ph3,\n                photo4: ph4,\n            } \n\n\n\n            //BOTTOM PART\n            let bottomPart:Tweet_BottomPart = {\n                replyCount: '',\n                likeCount: '',\n                retweetCount: '',\n                date: item.created_at\n            }\n\n            let tweet:Tweet = {\n                content: content,\n                topPart: topPart,\n                bottomPart: bottomPart\n            }\n\n            parsed.push(tweet)\n        }\n\n        return parsed\n    }\n\n\n    /*\n    ##################################\n    ##################################\n            JOIN && LEAVE \n    ##################################\n    ##################################\n    */\n    const joinGame = () => {\n\n        //has already joined\n        if (ref_pusherState.current === PusherState.connected ||\n            ref_pusherState.current === PusherState.connecting) {\n            console.log('already connecting or connected')\n            return\n        }\n        setPusherState(PusherState.connecting)\n\n        //init pusher client\n        let appKey = process.env.REACT_APP_PUSHER_KEY\n        let cluster = process.env.REACT_APP_PUSHER_CLUSTER\n        let _pusherClient = new Pusher(appKey, {\n          cluster: cluster,\n          encrypted: true,\n          authEndpoint: '/api/pusher/auth?id=' + ref_username.current \n        })\n\n        //bind to all events\n        //see: https://pusher.com/docs/channels/using_channels/connection#available-states\n        _pusherClient.connection.bind('state_change', (states:any) => {\n            //states = {previous: 'oldState', current: 'newState'}\n            console.log('new pusher state from event \"state_change\": ' + states.current)\n            //setPusherConState(states.current) //-> also see enum PusherConState\n        });\n\n        //bind error event\n        _pusherClient.connection.bind('error', (err:any) => {\n            setPusherState(PusherState.error)\n            let str = JSON.stringify(err, null, 4);\n            console.log('error during pusher connection')\n            console.log(str)\n        })\n\n        //bind connected\n        _pusherClient.connection.bind('connected', async () => {\n            \n            if (ref_pusherClient.current !== null) {\n                //reconnected\n                console.log('reconnected')\n                return\n            }\n            console.log('pusher is connected')\n\n            //sub channel\n            const channel = _pusherClient.subscribe(channelName)\n            // -> success\n            channel.bind('pusher:subscription_succeeded', () => {\n                console.log('subscribed to channel: ' + channelName)\n                \n                //set vars\n                ref_pusherClient.current = _pusherClient \n                ref_pusherChannel.current = channel\n\n                //bind to events\n                ref_pusherChannel.current.bind(SetupEventType.Join, \n                    (data:Setup_Event) => handleEvent_Join(data)\n                )\n                ref_pusherChannel.current.bind(SetupEventType.Player, \n                    (data:Setup_Event) => handleEvent_Player(data)\n                )\n                ref_pusherChannel.current.bind(SetupEventType.Chat, \n                    (data:Setup_Event) => handleEvent_Chat(data)\n                )\n                ref_pusherChannel.current.bind(SetupEventType.Profile, \n                    (data:Setup_Event) => handleEvent_Profile(data)\n                )\n                ref_pusherChannel.current.bind(SetupEventType.Settings, \n                    (data:Setup_Event) => handleEvent_Settings(data)\n                )\n                ref_pusherChannel.current.bind('pusher:member_removed', (member:any) => {\n                    //remove user\n                    let i = getIndexOfUser(member.id)\n                    ref_players.current.splice(i,1);\n                    addSysMsg(SysMsgType.userLeft, member.id)\n                    forceUpdate()\n                    assignJoinEventAdmin()\n                });\n\n                //request current state from lobby\n                fireEvent_Join()\n            });\n\n            // -> error\n            channel.bind('pusher:subscription_error', (err:any) => {\n                let str = JSON.stringify(err, null, 4);\n                console.log('error during subscribing to channel: ' + channelName)\n                console.log(str)\n            });\n        })\n    }\n\n    const leaveGame = () => {\n        console.log('leaving')\n        setPusherState(PusherState.connecting)\n        document.location.reload()\n    }\n\n    /*\n    ##################################\n    ##################################\n        EVENT: Join\n    ##################################\n    ##################################\n    */\n    const handleEvent_Join = (event:Setup_Event) => {\n\n        /*\n            ONLY FIRST USER HANDLES THIS\n        */\n\n        /*\n        let str = JSON.stringify(event.data, null, 4);\n        console.log(str)\n        */\n\n        //security\n        if (event.type !== SetupEventType.Join) {\n            console.log('EventType mismatch in handleEvent_Admin:\\n\\n' + event)\n            return\n        }\n        let triggerUser = event.data\n            \n        //encapsulated join\n        const joinPlayer = (name:string) => {\n            let newUser:Setup_Player = {\n                name: name,\n                ready: false\n            }\n            ref_players.current.push(newUser)\n            addSysMsg(SysMsgType.userJoined, name)\n        }\n\n        if (ref_players.current.length === 0 && triggerUser === ref_username.current ) {\n            /*\n                you are the only one in the game\n                -> dont send out event, add youself manually\n            */\n            console.log('you are the only person in the room')\n            //insert welcome first\n            let currentUrl = window.location.href\n            addSysMsg(SysMsgType.welcome,   '🎉 Welcome to your matchroom!') \n            addSysMsg(SysMsgType.welcome,   '🎉 Invite the people you wanna play by sending them the match-link (Browser-URL).' +\n                                            ' You can also let others scan the QR Code.' +\n                                            ' The game will start when everyone is ready.') \n            addSysMsg(SysMsgType.welcome,   currentUrl) \n            joinPlayer(triggerUser)\n            setPusherState(PusherState.connected) //force update is incl. here\n            return\n        }\n\n        if (ref_players.current[0].name === ref_username.current ) {\n            /*\n                you are admin\n                -> attach new user \n                -> broadcast current state\n            */\n            console.log('BROADCAST join for: ' + triggerUser)\n            joinPlayer(triggerUser)\n            fireEvent_Chat()\n            fireEvent_Players()\n            fireEvent_Profiles()\n            fireEvent_Settings()\n        }\n    }\n\n    const fireEvent_Join = async () => {\n\n        //prepare\n        let event:Setup_Event = {\n            type: SetupEventType.Join,\n            data: ref_username.current \n        }\n\n        //exectue\n        const response = await fetch('/api/pusher/setup/trigger', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'pusherchannel': channelName,\n                'pusherevent': event.type\n            },\n            body: JSON.stringify(event), \n        });\n\n        //read response\n        const body = await response.text();\n        console.log(body)\n    }\n\n    const assignJoinEventAdmin = () => {\n        /*\n            This has to be called when a new user joins or one leaves\n            -> assign new answer player for join event\n            -> only first player handles join event\n            (unbind to avoid double calling!)\n        */\n        if (ref_players.current.length > 0) {\n            ref_pusherChannel.current.unbind(SetupEventType.Join)\n            if (ref_players.current[0].name === ref_username.current ) {\n                //bind\n                ref_pusherChannel.current.bind(SetupEventType.Join,\n                    (data:any) => handleEvent_Join(data)\n                )\n                console.log('Bound join event')\n            }\n        }\n    }\n\n    /*\n    ##################################\n    ##################################\n        EVENT: Player\n    ##################################\n    ##################################\n    */\n    const handleEvent_Player = (event:Setup_Event) => {\n\n        //let str = JSON.stringify(event.data, null, 4);\n        //console.log(str)\n\n        //console.log(pusherChannel.members.count)\n        //security\n        if (event.type !== SetupEventType.Player) {\n            console.log('EventType mismatch in handleEvent_Player:\\n\\n' + event)\n            return\n        }\n\n        //set new state\n        let newPlayers:Setup_Player[] = event.data\n        console.log('total players: ' + newPlayers.length)\n        ref_players.current = newPlayers\n        setPusherState(PusherState.connected) //force update incl. here\n\n        assignJoinEventAdmin()\n\n        //check if all player are ready\n        let readyCount = 0\n        for(let i=0;i<ref_players.current.length;i++) {\n            if (ref_players.current[i].ready) {\n                readyCount++\n            }\n        }\n        if (readyCount === ref_players.current.length) {\n            console.log('everyone ready!')\n\n            //check if profiles selected\n            if (ref_profiles.current.length === 0) {\n                showNotification('You have to select profiles to play before you start', NotificationType.Not_Warning)\n                return\n            }\n\n            //let first user trigger management of game content\n            if (ref_username.current === ref_players.current[0].name) {\n                triggerMatchSetup()\n            }\n            //SET EVERYONE TO LOADING SCREEN HERE\n        }\n    }\n\n    const fireEvent_Players = async () => {\n\n        //prepare\n        let event:Setup_Event = {\n            type: SetupEventType.Player,\n            data: ref_players.current\n        }\n\n        //execute\n        console.log('broadcast new players')\n        const response = await fetch('/api/pusher/setup/trigger', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'pusherchannel': channelName,\n                'pusherevent': event.type\n            },\n            body: JSON.stringify(event),\n        });\n        \n        //read response\n        const body = await response.text();\n        console.log(body)\n    }\n\n    const toogleReady = (ready:boolean) => {\n        //set yourself ready\n        let i = getIndexOfUser(ref_username.current)\n        ref_players.current[i].ready = ready\n        fireEvent_Players()\n    }\n\n    /*\n    ##################################\n    ##################################\n        EVENT: Chat\n    ##################################\n    ##################################\n    */\n    const handleEvent_Chat = (event:Setup_Event) => {\n\n        //security\n        if (event.type !== SetupEventType.Chat) {\n            console.log('EventType mismatch in handleEvent_Chat:\\n\\n' + event)\n            return\n        }\n\n        //set new state\n        let newChat:Setup_ChatMsg[] = event.data\n        console.log('total msgs: ' + newChat.length)\n        ref_chat.current = newChat\n        forceUpdate()\n        \n    }\n\n    const fireEvent_Chat = async () => {\n\n        //publish without info messages -> remove them\n        for(let i=ref_chat.current.length-1;i>=0;i--) {\n            if (ref_chat.current[i].t === SysMsgType.info) {\n                ref_chat.current.splice(i,1)\n            }\n        }\n\n        //remove first message of chat until chat is smaller than 10KB\n        let chatString = JSON.stringify(ref_chat.current)\n        while (chatString.length > 10000) {\n            console.log('Chat too long\\n -> removing first message')\n            //find first non welcome message to remove\n            for(let i=0;i<ref_chat.current.length;i++) {\n                if (ref_chat.current[i].t !== SysMsgType.welcome) {\n                    ref_chat.current.splice(i,1)\n                    break\n                }\n            }\n            chatString = JSON.stringify(ref_chat.current)\n        }\n\n        //prepare\n        let event:Setup_Event = {\n            type: SetupEventType.Chat,\n            data: ref_chat.current\n        }\n\n        //execute\n        console.log('broadcast new chat ' + chatString.length)\n        const response = await fetch('/api/pusher/setup/trigger', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'pusherchannel': channelName,\n                'pusherevent': event.type\n            },\n            body: JSON.stringify(event),\n        });\n\n        //read response\n        const body = await response.text();\n        console.log(body)\n    }\n\n    /*\n    ##################################\n    ##################################\n        EVENT: Profiles\n    ##################################\n    ##################################\n    */\n    const handleEvent_Profile = (event:Setup_Event) => {\n\n        //console.log(pusherChannel.members.count)\n        //security\n        if (event.type !== SetupEventType.Profile) {\n            console.log('EventType mismatch in handleEvent_Profile:\\n\\n' + event)\n            return\n        }\n\n        //set new state\n        let newProfiles:Twitter_Profile[] = event.data\n        console.log('total profiles: ' + newProfiles.length)\n        ref_profiles.current = newProfiles\n        forceUpdate()\n    }\n\n    const fireEvent_Profiles = async () => {\n\n        //prepare\n        let event:Setup_Event = {\n            type: SetupEventType.Profile,\n            data: ref_profiles.current\n        }\n\n        //execute\n        console.log('broadcast new profiles')\n        const response = await fetch('/api/pusher/setup/trigger', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'pusherchannel': channelName,\n                'pusherevent': event.type\n            },\n            body: JSON.stringify(event),\n        });\n        \n        //read response\n        const body = await response.text();\n        console.log(body)\n    }\n\n    /*\n    ##################################\n    ##################################\n        EVENT: Settings\n    ##################################\n    ##################################\n    */\n    const handleEvent_Settings = (event:Setup_Event) => {\n\n        //console.log(pusherChannel.members.count)\n        //security\n        if (event.type !== SetupEventType.Settings) {\n            console.log('EventType mismatch in handleEvent_Settings:\\n\\n' + event)\n            return\n        }\n\n        //set new state\n        let newSettings:Setup_Settings = event.data\n        console.log('new Settings received')\n        ref_settings.current = newSettings\n        forceUpdate()\n    }\n\n    const fireEvent_Settings = async () => {\n\n        //prepare\n        let event:Setup_Event = {\n            type: SetupEventType.Settings,\n            data: ref_settings.current\n        }\n\n        //execute\n        console.log('broadcast new settings')\n        const response = await fetch('/api/pusher/setup/trigger', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'pusherchannel': channelName,\n                'pusherevent': event.type\n            },\n            body: JSON.stringify(event),\n        });\n        \n        //read response\n        const body = await response.text();\n        console.log(body)\n    }\n\n    /*\n    ##################################\n    ##################################\n        Functions to child components\n    ##################################\n    ##################################\n    */\n\n    //passed to search component\n    const onAddProfile = (newUser: Twitter_Profile):void => {\n\n        //check if user has tweets\n        if (newUser.statuses_count === 0) {\n            showNotification('User should have posted at least one tweet', NotificationType.Not_Error)\n            return\n        }\n\n        //check already added\n        for(let i=0;i<ref_profiles.current.length;i++) {\n            if (ref_profiles.current[i].screen_name === newUser.screen_name) {\n                showNotification(newUser.name + ' already added!', NotificationType.Not_Error)\n                return\n            }\n        }\n\n        //check maximum\n        if (ref_profiles.current.length >= 10) {\n            showNotification('Maximum number of 10 profiles reached', NotificationType.Not_Error)\n            return\n        }\n        \n        //check pusher event size\n        let alreadyL = JSON.stringify(ref_profiles.current).length\n        let newUserL = JSON.stringify(newUser).length\n        if ((alreadyL + newUserL) > 9000) {\n            showNotification('Pusher server cannot support more profiles!', NotificationType.Not_Error)\n            return\n        }\n\n        //if user did not post a lot, show warning\n        if (newUser.statuses_count < 20) {\n            showNotification('Playing profiles with few tweets might affect the game experience', NotificationType.Not_Warning)\n        }\n\n        //add\n        console.log('profile added: ' + newUser.screen_name)\n        ref_profiles.current.push(newUser)\n        fireEvent_Profiles()\n    }\n\n    //passed to chat \n    const onNewChatMessage = (newMsg:Setup_ChatMsg) => {\n        //console.log('new chat msg received: ' + newMsg.m)\n        newMsg.n = ref_username.current //chat component does not know/set user name\n        ref_chat.current.push(newMsg)\n        fireEvent_Chat()\n    }\n\n    const onLeaveTriggered = () => {\n        leaveGame()\n    }\n\n    const onToogleReady = (ready:boolean) => {\n        toogleReady(ready)\n    } \n\n    const onNewNotification = (msg:string, notType:NotificationType) => {\n        showNotification(msg, notType)\n    }\n\n    const onRemoveProfile = (deletedUser: Twitter_Profile):void => {\n        for(let i = 0; i<ref_profiles.current.length;i++) {\n            if (ref_profiles.current[i].screen_name === deletedUser.screen_name) {\n                ref_profiles.current.splice(i, 1)\n                console.log('user removed: ' + deletedUser.screen_name)\n                fireEvent_Profiles()\n                return\n            }\n        }\n    }\n\n    const onSettingsChanged = (newSettings:Setup_Settings) => {\n        ref_settings.current = newSettings\n        fireEvent_Settings()\n    } \n\n    /*\n    ##################################\n    ##################################\n            Handlers\n    ##################################\n    ##################################\n    */\n\n    const getAdmin = () => {\n        if (ref_username.current !== null && ref_players.current.length > 0) {\n            if (ref_username.current === ref_players.current[0].name) {\n                return true\n            }\n        }\n        return false\n    }\n\n    const getSpecialContent = () => {\n\n        let content = <div></div>\n\n        //check if given MatchID is invalid\n        let current = window.location.href\n        let matchID = current.substr(current.lastIndexOf('/') + 1);\n        if (matchID.length === 0 || !(/^\\d+$/.test(matchID))) {\n            console.log('INVALID ID: ' + matchID)\n            content =  \n                <div className={st.State_Con}>\n                    '{matchID}' is an invalid Match ID! Only numbers allowed\n                </div>\n            return content\n        }\n\n        //redirect back to join page\n        if (redirectToJoin) {\n            let redirectURL = '/match/join/' + matchID\n            return <Redirect to={redirectURL}/>\n        }\n        \n        //Pusher State\n        //loading\n        if (ref_pusherState.current === PusherState.init ||\n            ref_pusherState.current === PusherState.connecting) {\n            content =  \n                <div className={st.State_Con}>\n                    Loading\n                    <CircularProgress/>\n                </div>\n        }\n        //connected\n        else if (ref_pusherState.current !== PusherState.connected) {\n            content =  \n                <div className={st.State_Con}>\n                    Could not connect to match\n                </div>\n        }\n\n        return content\n    }\n    \n    return (\n    <div className={st.Content_Con}>\n        {getSpecialContent()}\n        <div className={st.Left_Panel}>\n            {Search(\n                ref_profiles.current,\n                onAddProfile,\n                onNewNotification\n            )}\n        </div>\n        <div className={st.Center_Panel}>\n            <div className={st.Lobby_Con}>\n                {Lobby(\n                    getAdmin(),\n                    ref_profiles.current,\n                    onRemoveProfile,\n                    ref_settings.current,\n                    onSettingsChanged,\n                    onNewNotification\n                )}\n            </div>\n            {Info()\n            }\n        </div>\n        <div className={st.Right_Panel}>\n            <div className={st.Interaction_Con}>\n                <Interaction\n                    user={ref_players.current[getIndexOfUser(ref_username.current)]}\n                    onLeaveClick={onLeaveTriggered}\n                    onToogleReadyClick={onToogleReady}\n                    addNotification={onNewNotification}\n                />\n            </div>\n            <div className={st.Players_Con}>\n                <Players   \n                    data={ref_players.current}\n                    currentUser={ref_username.current}\n                />\n            </div>\n            <div className={st.Chat_Con}>\n                {Chat(\n                    ref_chat.current,\n                    onNewChatMessage\n                )}\n            </div>\n        </div>\n        {ref_notification.current.display && \n            <div className={ref_notification.current.scssClass} onClick={() => hideNotification()}>\n                <div className={st.Not_Text}>\n                    {ref_notification.current.msg}\n                </div>\n                <div className={st.Not_Close}>\n                    x\n                </div>\n            </div>\n        }\n    </div>\n    );\n}","/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Mockdata.ts",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/search/Search.tsx",["179"],"import React, { useState } from 'react';\n//import  { Redirect } from 'react-router-dom'\nimport st from './Search.module.scss'\n\nimport TwitterProfileList from './TwitterProfileList'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport TwitterIcon from 'assets/footer/Twitter_Icon.png'\n\nimport {didUserExceedLimit} from 'components/Logic'\n\nimport {Twitter_Profile} from 'components/Interfaces'\nimport {LocalStorage} from 'components/Interfaces'\nimport {NotificationType} from 'components/Interfaces'\nimport {TwitterStatus} from 'components/Interfaces'\nimport {ProfilesUsage} from 'components/Interfaces'\n\nconst stateInitArray:Twitter_Profile[] = []\n\n/*\n//status for step 1\nenum TokenStatus {\n    init,\n    requested,\n    error,\n    //no received, since there is a immediate redirect on receive\n}\n\n//status for saved token from localstorage\nenum TokenVerify {\n    init,\n    pending,\n    fail,\n    success\n}\n*/\n\n//search request type\nenum RequestType {\n    inital,\n    more\n}\n\nlet actionTimestamps:string[] = []\n\nexport default function Search(\n                                addedUsers:Twitter_Profile[],\n                                addUserFunc:(par1: Twitter_Profile) => void,\n                                newNotification:(msg:string, notType:NotificationType) => void) \n                                {\n    const [page, setPage] = useState(1);\n    const [userObjects, setUserObjects] = useState(stateInitArray);\n    const [searchInput, setSearchInput] = useState(\"\");\n    const [lastSearchString, setLastSearchString] = useState(\"\");\n    const [searchEnabled, setSearchEnabled] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [twitterStatus, setTwitterStatus] = useState(TwitterStatus.none)\n    //const [tokenStatus, setTokenStatus] = useState(TokenStatus.init)\n    //const [tokenVerifyStatus, setTokenVerifyStatus] = useState(TokenVerify.init)\n    //const [redirectURL, setRedirectURL] = useState('')\n\n    \n    /*\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => {\n\n        \n        //CHECK IF USER ALREADY HAS VALID TOKEN IN LOCAL STORAGE\n        //only verify once\n        if (tokenVerifyStatus !== TokenVerify.init) {\n            return\n        }\n        //verify token & secret\n        setTokenVerifyStatus(TokenVerify.pending)\n        let accessToken = localStorage.getItem(LocalStorage.Access_Token)\n        let accessToken_Secret = localStorage.getItem(LocalStorage.Access_Token_Secret)\n        if (accessToken !== null && accessToken_Secret != null) {\n            console.log('token & secret available -> verify')\n            verifyCredentials(accessToken, accessToken_Secret)\n                .then(() => {\n                    //success -> enable search\n                    setTwitterStatus(TwitterStatus.signedIn)\n                }) \n                .catch(() => {\n                    setTokenVerifyStatus(TokenVerify.fail)\n                });\n        }\n    });\n    */\n    \n\n    /*\n    ##################################\n    ##################################\n                GENERAL\n    ##################################\n    ##################################\n    */\n\n    //send error notification to setup\n    const showErrNot = (msg: string) => {\n        console.log(msg)\n        newNotification('Error: ' + msg, NotificationType.Not_Error)\n    }\n\n    const showWarNot = (msg: string) => {\n        console.log(msg)\n        newNotification('Warning: ' + msg, NotificationType.Not_Warning)\n    }\n\n    //ACTIONS EXCEEDED\n    const actionsExceeded = () => {\n        if (didUserExceedLimit(actionTimestamps, 20, 30000)) {\n            //actions exceeded\n            newNotification('easy boy... small cooldown - too many actions', NotificationType.Not_Warning)\n            return true\n        }\n        //not exceeded -> add timestamp\n        actionTimestamps.push(new Date().toISOString())\n        return false\n    }\n\n    /*\n    ##################################\n    ##################################\n            Search Users\n    ##################################\n    ##################################\n    */\n\n\n    const onSearchButtonClick = (type: RequestType) => {\n\n        if (actionsExceeded()) {\n            return\n        }\n\n        //dont fire mutiple requests\n        if (loading) {\n            showWarNot('already loading')\n            return\n        }\n\n        //check if search string is provided\n        if (!searchEnabled && RequestType.inital) {\n            showErrNot('no input string')\n            return\n        }\n\n        //check if user loads more users or searches for new\n        let qString = \"\"\n        let newPage = -1\n        if (type === RequestType.inital) {\n            setPage(1)\n            newPage = 1\n            qString = searchInput\n\n            //reset user objects\n            let _userObjects = userObjects \n            let length = _userObjects.length\n            while (length >= 0) {\n                _userObjects.pop()\n                length--\n            }\n            setUserObjects(_userObjects) \n            \n        }\n        else if (type === RequestType.more) {\n            newPage = page + 1\n            setPage(newPage)\n            qString = lastSearchString\n        }\n\n        if (qString === \"\" || newPage === -1) {\n            showErrNot('not all query parameters given')\n            return\n        }\n\n        //start request\n        setLoading(true)\n        getUsers(qString, newPage)\n            .then(res => {\n                if (res.status !== 200) {\n                    //error\n                    showErrNot(res.message)\n                    if (res.status === 44) {\n                        //-> no more users to show\n                        showWarNot('no more users available')\n                    }\n                }\n                else {\n                    //success\n                    console.log('successfully got data for \"' + qString + '\" at page ' + newPage)\n\n                    //if user clicks on more but deleted search string already\n                    if (searchInput.length === 0) {\n                        setLastSearchString(lastSearchString)\n                    }\n                    else {\n                        setLastSearchString(searchInput)\n                    }\n\n                    //append new user objects to current\n                    let _userObjects = userObjects\n                    let concat = _userObjects.concat(res.data)\n                    setUserObjects(concat) \n                }\n                setLoading(false)\n            }) \n            .catch(err => {\n                showErrNot('critical system error occured, check console')\n                console.log(err)\n                setLoading(false)\n            });\n    }\n\n\n    const getUsers = async (name: string, page: number) => {\n\n        let accessToken = localStorage.getItem(LocalStorage.Access_Token)\n        let accessToken_Secret = localStorage.getItem(LocalStorage.Access_Token_Secret)\n        if (accessToken === null) {\n            accessToken = \"\"\n        }\n        if (accessToken_Secret === null) {\n            accessToken_Secret = \"\"\n        }\n\n        //passing additional parameters in header\n        var requestOptions = {\n            headers: {\n                'q': name,\n                'page': page.toString(),\n                'token': accessToken,\n                'token_secret': accessToken_Secret\n            }\n        };\n        let request = new Request('/api/twitter/users', requestOptions)\n\n        const response = await fetch(request)\n        const body = await response.json()\n        if (response.status !== 200) throw Error(body.message)\n        \n        return body;\n    };\n\n    /*\n    ##################################\n    ##################################\n            Twitter Sign in\n    ##################################\n    ##################################\n    */\n\n    /*\n    const onSignInButtonClicked = async () => {\n\n        //alredy requested\n        if (tokenStatus === TokenStatus.requested) {\n            return\n        }\n\n        console.log('trying to sign in')\n        setTokenStatus(TokenStatus.requested)\n\n        //userAuth\n        let request = new Request('/api/twitter/request_token')\n        const response = await fetch(request)\n        const body = await response.json()\n        if (body.status !== 200) {\n            showErrNot(body.message) //maybe not body.message \n            setTokenStatus(TokenStatus.error)\n        }\n        else {\n            console.log(body)\n            //\"oauth_token=i-7ofAAAAAABLx8pAAABd86SI80&\n            //oauth_token_secret=IvoJA3G2XzQ41c9IlfgZb8HHQY8Vw6Rq&oauth_callback_confirmed=true\"\n            let str: string = body.body\n\n            //extract token\n            let search = '='\n            let start = str.indexOf(search) + search.length;\n            let end = str.indexOf('&');\n            let token = str.substring(start, end)\n\n            //extract token_secret\n            search = 'secret='\n            start = str.indexOf(search) + search.length;\n            end = str.lastIndexOf('&');\n            let tokenSecret = str.substring(start, end)\n\n            //extract matchID\n            let current = window.location.href\n            let matchID = current.substr(current.lastIndexOf('/') + 1)\n\n            //reset old access token + secret retrieved in step 3\n            localStorage.removeItem(LocalStorage.Access_Token)\n            localStorage.removeItem(LocalStorage.Access_Token_Secret)\n\n            //save tokens for current step 1\n            localStorage.setItem(LocalStorage.Token, token)\n            localStorage.setItem(LocalStorage.Token_Secret, tokenSecret)\n            localStorage.setItem(LocalStorage.MatchID, matchID)\n\n            //redirect user to: /redirect/:token\n            setRedirectURL('/redirect/' + token)\n            setTwitterStatus(TwitterStatus.tokenReceived)\n            \n        }\n    }\n\n    const verifyCredentials = async (accessToken: string, accessToken_Secret: string) => {\n        //passing additional parameters in header\n        var requestOptions = {\n            headers: {\n                'token': accessToken,\n                'token_secret': accessToken_Secret\n            }\n        };\n        let request = new Request('/api/twitter/verify_token', requestOptions)\n\n        const response = await fetch(request)\n        const body = await response.json()\n        if (body.status !== 200) {\n            showErrNot(body.message) \n            setTokenVerifyStatus(TokenVerify.fail)\n            throw new Error(body)\n        }\n        else {\n            console.log('valid token & secret')\n            setTokenVerifyStatus(TokenVerify.success)\n            return \"200\";\n        }\n    };\n    */\n\n\n\n    /*\n    ##################################\n    ##################################\n            Handlers\n    ##################################\n    ##################################\n    */\n    const userNameChanged = (name: string) => {\n        setSearchInput(name)\n\n        //check empty or only spaces\n        if (name.length === 0 || !name.trim()) {\n            setSearchEnabled(false)\n        }\n        else {\n            setSearchEnabled(true)\n        }\n    }\n\n    const keyPressed = (event: any) => {\n        if (event.key === 'Enter' && searchInput !== \"\") {\n            onSearchButtonClick(RequestType.inital)\n        }\n    }\n\n\n    /*\n    ##################################\n    ##################################\n            CONTENT\n    ##################################\n    ##################################\n    */\n    const getLoginComponent = () => {\n        /*\n            conditions like 'joinType' have to be passed to the Search component in order to avoid\n            errors in parent component like:\n            -> \"React has detected a change in the order of Hooks\"\n            -> \"Uncaught Invariant Violation: Rendered more hooks than during the previous render\"\n            https://reactjs.org/docs/hooks-rules.html\n        */\n        let rtn = <div></div>\n\n        return rtn\n\n        /*\n        if (twitterStatus === TwitterStatus.none) {\n            //NOT SIGNED IN\n            rtn = \n            <div className={st.Login_Con}>\n                <div className={st.Button_Con} title=\"Sign into your twitter to play your followed profiles\">\n                    <img className={st.Icon} \n                        src={TwitterIcon} \n                        alt=\"Sign into Twitter\" \n                        onClick={() => onSignInButtonClicked()}/>\n                    <button className={st.Search} \n                            onClick={() => onSignInButtonClicked()}>\n                                Sign in\n                    </button>\n                </div>\n                <div className={st.TokenStatus_Con}>\n                    {(tokenStatus === TokenStatus.error) &&\n                        <div>\n                            There was an error receiving the token.\n                        </div>\n                    }\n                    {(tokenStatus === TokenStatus.requested) &&\n                        <CircularProgress/>\n                    }\n                    {(tokenVerifyStatus === TokenVerify.fail) &&\n                        <div>\n                            Previously used user-credentials could not be verified, please sign in again.\n                        </div>\n                    }\n                </div>\n            </div>\n        }\n        else if (twitterStatus === TwitterStatus.tokenReceived) {\n            //FIRST TOKEN RECEIVED\n            rtn = \n                <Redirect to={redirectURL}/>\n        }\n        else if (twitterStatus === TwitterStatus.signedIn) {\n            //SIGNED IN\n            rtn = \n            <div className={st.Login_Con}>\n                You are signed in with your twitter user!\n            </div>\n        }\n        return rtn\n        */\n    }\n\n  return (\n    <div className={st.Con}>\n        {getLoginComponent()}\n        <div className={st.Search_Con}>\n            <div className={st.Top_Con}>\n                <input  className={st.Input} \n                        type=\"search\" \n                        autoComplete=\"off\" \n                        placeholder=\"Enter username or tag...\"\n                        onChange={(e) => userNameChanged(e.target.value)} \n                        onKeyPress={(e) => keyPressed(e)}/>\n                {searchEnabled && \n                    <div className={st.Button_Con}>\n                        <img className={st.Icon} \n                            src={TwitterIcon} \n                            alt=\"Twitter\" \n                            onClick={(e) => onSearchButtonClick(RequestType.inital)}/>\n                        <button className={st.Search} \n                                onClick={(e) => onSearchButtonClick(RequestType.inital)}>\n                                    Search\n                        </button>\n                    </div>\n                }\n            </div>\n            {userObjects.length === 0 &&\n                <div className={st.EmptyResults_Con}>\n                    Search for public Twitter profiles and add them by clicking the card.\n                </div>\n            }\n            {userObjects.length !== 0  && \n                <div className={st.List_Con}>\n                    <TwitterProfileList\n                        parentType={ProfilesUsage.Search}\n                        data={userObjects}\n                        addedUsers={addedUsers}\n                        onAddUser={addUserFunc}\n                        onRemoveUser={() => {}}\n                        twitterStatus = {twitterStatus}\n                    />\n                    {(userObjects.length % 20 === 0) && \n                        <div className={st.More_Con}>\n                            <button className={st.More} \n                                    onClick={(e) => onSearchButtonClick(RequestType.more)}>\n                                Show more...\n                            </button>\n                            {loading && //\"more\" loading\n                                <div className={st.Loading_Con}>\n                                    <CircularProgress/>\n                                </div>\n                            }\n                        </div>\n                    }\n                </div>\n            }\n            {loading && userObjects.length === 0 && //\"inital\" loading\n            <div className={st.Loading_Con}>\n                <CircularProgress/>\n            </div>\n            }\n        </div>\n    </div>\n  );\n}\n\n\n\n/*\n\n\n\n\n\n\n*/\n",["180","181"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/pages/Nav_Ranking.tsx",[],["182","183"],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/Nav.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/Images.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/BottomPart.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/nav/pages/Nav_Answers.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/players/Players.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/chat/Chat.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/tweet/parts/TopPart.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Interfaces.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/Credits.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/Extensions.js",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/interaction/Interaction.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/Logic.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/pages/TwitterRedirect.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/TwitterCallback.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/join/Join.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/search/TwitterProfileList.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/info/Info.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/lobby/profiles/Profiles.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/lobby/settings/Settings.tsx",[],"/Users/hannesschaletzky/Desktop/repos/citefight2/client/src/components/match/setup/lobby/Lobby.tsx",[],{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"184","replacedBy":"188"},{"ruleId":"186","replacedBy":"189"},{"ruleId":"184","replacedBy":"188"},{"ruleId":"186","replacedBy":"189"},{"ruleId":"184","replacedBy":"190"},{"ruleId":"186","replacedBy":"191"},{"ruleId":"184","replacedBy":"192"},{"ruleId":"186","replacedBy":"193"},{"ruleId":"184","replacedBy":"194"},{"ruleId":"186","replacedBy":"195"},{"ruleId":"196","severity":1,"message":"197","line":31,"column":8,"nodeType":"198","messageId":"199","endLine":31,"endColumn":18},{"ruleId":"196","severity":1,"message":"200","line":310,"column":17,"nodeType":"198","messageId":"199","endLine":310,"endColumn":22},{"ruleId":"196","severity":1,"message":"201","line":56,"column":27,"nodeType":"198","messageId":"199","endLine":56,"endColumn":43},{"ruleId":"184","replacedBy":"202"},{"ruleId":"186","replacedBy":"203"},{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},"no-native-reassign",["204"],"no-negated-in-lhs",["205"],["204"],["205"],["204"],["205"],["204"],["205"],["204"],["205"],"@typescript-eslint/no-unused-vars","'BottomPart' is defined but never used.","Identifier","unusedVar","'media' is assigned a value but never used.","'setTwitterStatus' is assigned a value but never used.",["204"],["205"],"no-global-assign","no-unsafe-negation"]